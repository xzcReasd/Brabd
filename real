local Env = getgenv()

-- unloading
    if Env.Lumora then
        Env.Lumora.Utility.unload()
    end
--

-- services
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local CoreGui = game:GetService("CoreGui")
    local HttpService = game:GetService("HttpService")
    local TweenService = game:GetService("TweenService")
    local TeleportService = game:GetService("TeleportService")
    local Workspace = game:GetService("Workspace")
    local GuiService = game:GetService("GuiService")
    local Lighting = game:GetService("Lighting")
    local Stats = game:GetService("Stats")
--

-- luraph macros
    if not LPH_OBFUSCATED then
        LPH_ENCSTR = function(...) return ... end
        LPH_ENCNUM = function(...) return ... end
        LPH_CRASH = function(...) return ... end
        LPH_JIT = function(...) return ... end
        LPH_JIT_MAX = function(...) return ... end
        LPH_NO_VIRTUALIZE = function(...) return ... end
        LPH_NO_UPVALUES = function(...) return ... end
    end
--

-- vars
    local Camera = workspace.CurrentCamera
    local HiddenUI = gethui()
    local LocalPlayer = Players.LocalPlayer
    local Loaded = false

    local Acceleration = Vector3.new(0, -Workspace.Gravity, 0)

    Env.Lumora = { }
--

-- bin
    local BinLib = {
        methods = {
            ["function"] = true,
            thread = true,
            RBXScriptConnection = "Disconnect"
        }
    }; do
        function BinLib.bin()
            local bin = { 
                storage = {} 
            }
    
            function bin:add(item, method)
                table.insert(self.storage, {
                    main = item,
                    destroy = function()
                        local destroyMethod = method or BinLib.methods[typeof(item)] or "Destroy"
    
                        if destroyMethod == true then 
                            if type(item) == "function" then
                                item()
                            else
                                task.cancel(item)
                            end
                        else 
                            local callMethod = item[destroyMethod]
    
                            if callMethod then
                                callMethod(item)
                            end
                        end 
                    end
                })
    
                return item
            end
    
            function bin:destroy()
                if not (self and self.storage) then return end
    
                for _, entry in ipairs(self.storage) do 
                    if not (entry and entry.destroy) then continue end
    
                    entry.destroy()
                end
    
                self.storage = nil
            end
    
            return bin    
        end
    end; Env.Lumora.BinLib = BinLib; Bin = BinLib.bin(); Env.Lumora.Bin = Bin
--

-- util
    local Utility = {}; do
        function Utility.unload()
            Bin:destroy()

            Env.Lumora = nil
        end

        function Utility.Connect(connection)
            Bin:add(connection)

            return connection
        end

        function Utility.New(sqr, props)
            local Obj = Instance.new(sqr)
    
            if props then 
                for _,v in props do
                    Obj[_] = v
                end
            end
    
            Bin:add(Obj)
            
            return Obj
        end

        function Utility.Round(number, float)
            local Mult = 1 / (float or 1)
    
            return math.floor(number * Mult + 0.5) / Mult
        end

        function Utility.GetTrans(obj)
            local Index = nil;
        
            if obj:IsA("Frame") then
                Index = "BackgroundTransparency"
            elseif obj:IsA("TextLabel") or obj:IsA("TextButton") then
                Index = "TextTransparency"
            elseif obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
                Index = "ImageTransparency"
            elseif obj:IsA("ScrollingFrame") then
                Index = "BackgroundTransparency"
            elseif obj:IsA("TextBox") then
                Index = "TextTransparency"
            end
        
            return Index
        end
        
        function Utility.GetFiles(folder, extensions)
            if not isfolder(folder) then
                makefolder(folder)
            end
    
            local Files = isfolder(folder) and listfiles(folder) or {}
            local StoredFiles = {}
            local FileNames = {}
    
            for _,v in Files do
                for _,ext in extensions do
                    if v:find(ext) then
                        StoredFiles[#StoredFiles + 1] = v
                        FileNames[#FileNames + 1] = v:gsub(folder, ""):gsub(ext, "")
                    end
                end
            end
        
            return StoredFiles, FileNames
        end

        function Utility.Lerp(a, b, c)
            c = c or 1 / 8
            
            local offset = math.abs(b - a)
            if (offset < c) then 
                return b 
            end 
    
            return a + (b - a) * c
        end

        function Utility.LineMath(obj, from, to, thickness)
            local Direction = (to - from)
            local Center = (to + from) / 2
            local Distance = Direction.Magnitude
            local Theta = math.deg(math.atan2(Direction.Y, Direction.X))

            obj.Position = UDim2.fromOffset(Center.x, Center.y)
            obj.Rotation = Theta
            obj.Size = UDim2.fromOffset(Distance, thickness)
        end

        -- Multi definitions
        Utility.Signal = Utility.Connect
    end; Env.Lumora.Utility = Utility;
--

-- supported games
    local Games = {
        Data = {
            ["Arsenal"] = {
                Name = "Arsenal",
                GameId = 111958650,
                GetInfo = function( data, player, ... ) 
                    local NRPBS = player:FindFirstChild("NRPBS")
                    local Health = NRPBS and NRPBS:FindFirstChild("Health")
                    local MaxHealth = NRPBS and NRPBS:FindFirstChild("MaxHealth")
                    local EquippedTool = NRPBS and NRPBS:FindFirstChild("EquippedTool")
                    
                    data.Tool = EquippedTool and EquippedTool.Value or nil
                    data.Health = Health and Health.Value or 0
                    data.MaxHealth = MaxHealth and MaxHealth.Value or 100
                end
            },
            ["Apocalypse Rising 2"] = {
                Name = "Apocalypse Rising 2",
                GameId = 358276974,
                GetPlayers = function()
                    local Entities = Players:GetPlayers()

                    local Zombies = workspace:FindFirstChild("Zombies")

                    if not Zombies then
                        return Entities
                    end

                    local Mobs = Zombies:FindFirstChild("Mobs")

                    if not Mobs then
                        return Entities
                    end

                    for _,mob in Mobs:GetChildren() do
                        table.insert(Entities, mob)
                    end

                    return Entities
                end,
                GetInfo = function( data, player, ... ) 
                    if data.IsPlayer then
                        local Stats = player:FindFirstChild("Stats")
                        local Health = Stats and Stats:FindFirstChild("Health")
                        local Weapon = Stats and Stats:FindFirstChild("Primary")

                        data.Tool = Weapon and Weapon.Value or nil
                        data.Health = Health and Health.Value or 0
                    else
                        data.Tool = "None"
                        data.Health = 100
                        data.MaxHealth = 100
                        data.Team = nil
                        data.IsTeammate = false
                    end
                end
            },
            ["Typical Colors 2"] = {
                Name = "Typical Colors 2",
                GameId = 147332621,
                GetInfo = function( data, player, ... ) 
                    local Character = data.Character
                    local Gun = Character and Character:FindFirstChild("Gun")
                    local Boop = Gun and Gun:FindFirstChild("Boop")
                    
                    data.Tool = Boop and Boop.Value or nil
                end
            }
        }
    }

    function Games.GetGame()
        for _,v in Games.Data do
            if game.GameId == v.GameId then
                return v
            end
        end

        return nil
    end

    local Game = Games.GetGame()
    local GameName = Game and Game.Name or ""
--

-- folders
    local Folder = "BrandNew"

    makefolder(Folder)

    local ImagesFolder = string.format( "%s\\%s\\", Folder, "Images" )
    
    makefolder(ImagesFolder)

    local FontsFolder = string.format( "%s\\%s\\", Folder, "FontsFolder" )

    makefolder(FontsFolder)

    local Games = string.format( "%s\\%s", Folder, "Games" )

    makefolder(Games)

    local MainFolder = string.format( "%s\\%s", Games, Game and Game.Name or "Universal" )

    makefolder(MainFolder)

    local ConfigFolder = string.format( "%s\\%s\\", MainFolder, "Configs" )

    makefolder(ConfigFolder)
--

-- fonts
    local Fonts = {
        URL = "https://raw.githubusercontent.com/luminbot/FontStorage/main/",

        Names = {
            "Proggy",
            "ProggyTiny",
            "Minecraftia",
            "SmallestPixel7",
            "Verdana",
            "VerdanaBold",
            "Tahoma",
            "ProggyClean",
            "TahomaXP"
        },

        Data = {}
    }; do
        function Fonts.Load(font)
            local TTF = string.format("%s%s.ttf", FontsFolder, font)
            local JSON = string.format("%s%s.json", FontsFolder, font)

            if not isfile(TTF) then
                local success, data = pcall(function()
                    return game:HttpGet( string.format("%s%s.txt", Fonts.URL, font) )
                end)

                if success and data then
                    writefile(TTF, base64_decode(data))
                else
                    return
                end            
            end

            if not isfile(JSON) then
                local Font = {
                    name = font,
                    faces = {{
                        name = "Regular",
                        weight = 400,
                        style = "normal",
                        assetId = getcustomasset(TTF)
                    }}
                }
            
                writefile(JSON, HttpService:JSONEncode(Font))
            end

            Fonts.Data[font] = Font.new(getcustomasset(JSON), Enum.FontWeight.Regular)
        end

        function Fonts.Get(font)
            return Fonts.Data[font]
        end

        for _,font in Fonts.Names do
            Fonts.Load(font)
        end
    end; Env.Lumora.Fonts = Fonts
--

-- images
    local Images = {
        URL = "https://raw.githubusercontent.com/OxygenClub/LUAS/refs/heads/main/pictures/",

        Names = {
            "gear"
        },

        Data = {}
    }; do
        function Images.Load(image)
            local PNG = string.format("%s%s.png", ImagesFolder, image)

            if not isfile(PNG) then
                local success, data = pcall(function()
                    return game:HttpGet( string.format( "%s%s.txt", Images.URL, image ) )
                end)

                if success and data then
                    writefile(PNG, base64_decode(data))
                else
                    return
                end
            end

            Images.Data[image] = getcustomasset(PNG)
        end

        function Images.Get(image)
            return Images.Data[image]
        end

        for _,image in Images.Names do
            Images.Load(image)
        end
    end; Env.Lumora.Images = Images
--

-- library
    local Library = {
        TweenSpeed = 0.2,
        TweenStyle = Enum.EasingStyle.Quad,

        ThemeObjects = {},

        Font = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold), -- Fonts.Get("TahomaXP"),
        FontSize = 15,

        Flags = {},
        ConfigFlags = {},
        
        Popups = { },

        Dropdowns = { },

        Fps = 0,

        ScrollBar = "rbxassetid://12776289446",
        Saturation = "rbxassetid://13901004307",
        Checkers = "http://www.roblox.com/asset/?id=18274452449",

        Converts = { 
            [0] = "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
        },

        KeyConverters = { 
            escape = "ESC",
            backquote = "`",
            backspace = "BSP",
            slash = "/",
            leftquote = "'",
            rightquote = '"',
            leftbracket = "[",
            rightbracket = "]",
            semicolon = ";",
            comma = ",",
            period = ".",
            backslash = "\\",
            minus = "-",
            equals = "=",
            space = "SPC",
            [ "return" ] = "ENT",
            tab = "TAB",
            capslock = "CAP",
            leftshift = "LSH",
            mousebutton1 = "MB1",
            mousebutton2 = "MB2",
            mousebutton3 = "MB3",
            rightshift = "RSH",
            leftcontrol = "CTRL",
            leftalt = "ALT",
            leftsuper = "WIN",
            rightcontrol = "CTRL",
            rightalt = "ALT",
            rightsuper = "WIN",
            insert = "INS",
            delete = "DEL",
            home = "HME",
            pageup = "PUD",
            pagedown = "PDN",
            up = "UP",
            down = "DWN",
            left = "LFT",
            right = "RGT",
            numlock = "NUM",
            numpad0 = "N0",
            numpad1 = "N1",
            numpad2 = "N2",
            numpad3 = "N3",
            numpad4 = "N4",
            numpad5 = "N5",
            numpad6 = "N6",
            numpad7 = "N7",
            numpad8 = "N8",
            numpad9 = "N9",
        },

        Theme = {
            Inline = Color3.fromRGB(52, 52, 52),

            Background = Color3.fromRGB(36, 36, 36),
            ["Page Background"] = Color3.fromRGB(22, 22, 22),
            ["Section Background"] = Color3.fromRGB(30, 30, 30),
            ["Dark Background"] = Color3.fromRGB(19, 19, 19),

            Accent = Color3.fromRGB(0, 134, 229),

            ["Dark Text"] = Color3.fromRGB(120, 120, 120),
            ["Light Text"] = Color3.fromRGB(160, 160, 160),
            Text = Color3.fromRGB(220, 220, 220),
        },

        Notifications = {},

    }; Library.__index = Library do
        Library.Utility = { Objects = {}, Connections = {} }; local Utility = Library.Utility do
            function Utility.New(object, props, theme)
                local Obj = Instance.new(object)

                if props then
                    for prop, val in props do
                        Obj[prop] = val
                    end
                end

                if theme then
                    Library.AddObjectTheme(Obj, theme)
                end

                table.insert(Utility.Objects, Obj)

                return Obj
            end

            function Utility.Signal(connection)
                table.insert(Utility.Connections, connection)

                return connection
            end

            function Utility.GetTransparency(obj)
                if obj:IsA("Frame") then
                    return "BackgroundTransparency"
                elseif obj:IsA("TextLabel") or obj:IsA("TextButton") then
                    return { "TextTransparency", "BackgroundTransparency" }
                elseif obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
                    return { "BackgroundTransparency", "ImageTransparency" }
                elseif obj:IsA("ScrollingFrame") then
                    return { "BackgroundTransparency", "ScrollBarImageTransparency" }
                elseif obj:IsA("TextBox") then
                    return { "TextTransparency", "BackgroundTransparency" }
                end
            
                return nil
            end

            function Utility.Round(number, float)
                local Mult = 1 / (float or 1)

                return math.floor(number * Mult + 0.5) / Mult
            end

            -- taken from dev forums.
            function Utility.PositionOver(position, object, addedy)
                addedy = addedy or 0
        
                local posX, posY = object.AbsolutePosition.X, (object.AbsolutePosition.Y - addedy)
                local size = object.AbsoluteSize
                local sizeX, sizeY = posX + size.X, posY + size.Y + addedy
        
                if position.X >= posX and position.Y >= posY and position.X <= sizeX and position.Y <= sizeY then
                    return true
                end
        
                return false
            end
        
            function Utility.MouseOver(object, input)
                local posX, posY = object.AbsolutePosition.X, object.AbsolutePosition.Y
                local size = object.AbsoluteSize
                local sizeX, sizeY = posX + size.X, posY + size.Y
                local position = input.Position
        
                if position.X >= posX and position.Y >= posY and position.X <= sizeX and position.Y <= sizeY then
                    return true
                end
        
                return false
            end

            function Utility.Lerp(a, b, c)
                c = c or 1 / 8
                
                local offset = math.abs(b - a)
                if (offset < c) then 
                    return b 
                end 
        
                return a + (b - a) * c
            end

            function Utility.StringToEnum(enumstring)
                local EnumType, EnumValue = enumstring:match("Enum%.([^%.]+)%.(.+)")

                if EnumType and EnumValue then
                    return Enum[EnumType][EnumValue]
                end

                return nil
            end

            function Utility.TextTriggers(text)
                local Triggers = {
                    ["{hour}"] = os.date("%H"),
                    ["{minute}"] = os.date("%M"),
                    ["{second}"] = os.date("%S"),
                    ["{ap}"] = os.date("%p"),
                    ["{month}"] = os.date("%b"),
                    ["{day}"] = os.date("%d"),
                    ["{year}"] = os.date("%Y"),
                    ["{fps}"] = Library.Fps,
                    ["{ping}"] = math.floor(Stats.PerformanceStats.Ping:GetValue() or 0),
                    ["{time}"] = os.date("%H:%M:%S"),
                    ["{date}"] = os.date("%b. %d, %Y"),
                    ["{game}"] = Game and Game.Name or "Universal",
                    ["{n}"] = "\n"
                }
        
                for i,v in Triggers do
                    text = string.gsub(text, i, v)
                end
        
                return text
            end
        
        end

        Library.ScreenGui = Utility.New("ScreenGui", {
            Name = "\0",
            DisplayOrder = 1,
            Parent = HiddenUI
        })

        function Library.Tween(obj, props, tweeninfo)
            tweeninfo = tweeninfo or TweenInfo.new(Library.TweenSpeed, Library.TweenStyle)

            local Tween = TweenService:Create(obj, tweeninfo, props)

            Tween:Play()

            return Tween
        end

        function Library.Fade(obj, prop, vis)
            if not (obj.Visible and prop) then
                return
            end

            local OldTransparency = obj[prop]
            obj[prop] = vis and 1 or OldTransparency

            local Tween = Library.Tween(obj, { [prop] = vis and OldTransparency or 1 })

            Utility.Signal(Tween.Completed:Connect(function()
                if not vis then
                    task.wait()
                    obj[prop] = OldTransparency
                end
            end))

            return Tween
        end

        function Library.AddObjectTheme(object, props)
            local Theme = {
                Props = props,
                Object = object
            }

            for prop,v in props do
                if type(v) == "string" then
                    object[prop] = Library.Theme[v]
                elseif type(v) == "function" then
                    object[prop] = v()
                end
            end

            Library.ThemeObjects[object] = Theme
        end

        function Library.ChangeObjectTheme(object, props, tweened)
            local Theme = Library.ThemeObjects[object]

            if Theme then
                Theme.Props = props

                for prop,v in props do
                    if type(v) == "string" then
                        if tweened then
                            Theme.Tween = Library.Tween(object, {
                                [prop] = Library.Theme[v]
                            })
                        else
                            object[prop] = Library.Theme[v]
                        end
                    elseif type(v) == "function" then
                        object[prop] = v()
                    end
                end
            end
        end

        function Library.UpdateTheme(theme, color)
            if not Library.Theme[theme] then
                return
            end

            Library.Theme[theme] = color

            for _,themeobj in Library.ThemeObjects do
                for prop,val in themeobj.Props do
                    if val == theme then
                        if themeobj.Tween then
                            themeobj.Tween:Cancel()
                        end

                        themeobj.Object[prop] = color
                    end
                end
            end
        end

        function Library.Config(cfg, default)
            local Table = { }

            for name, val in cfg do
                Table[name:lower()] = val
            end

            for name, val in default do
                if Table[name] == nil then
                    Table[name] = val
                end
            end

            return Table
        end

        function Library.Resize(holder, box)
            local Start, StartSize, Resizing;
            local CurrentSize = holder.Size
            local OriginalSize = holder.Size
        
            Utility.Signal(box.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Resizing = true
                    Start = input.Position
                    StartSize = holder.Size
                end
            end))
        
            Utility.Signal(UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and Resizing then
                    local ViewportSize = Camera.ViewportSize
                    CurrentSize = UDim2.new(0, math.clamp(StartSize.X.Offset + (input.Position.X - Start.X), OriginalSize.X.Offset, ViewportSize.x), 0, math.clamp(StartSize.Y.Offset + (input.Position.Y - Start.Y), OriginalSize.Y.Offset, ViewportSize.y))
                    holder.Size = CurrentSize
                end
            end))
        
            Utility.Signal(UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Resizing = false
                end
            end))
        end
        
        function Library.Dragging(holder, box)
            local Start, StartPos, Dragging;
            local CurrentPos;
            local Inset = GuiService:GetGuiInset( );

            Utility.Signal(box.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Dragging = true
                    Start = input.Position
                    StartPos = holder.AbsolutePosition
                end
            end))
        
            Utility.Signal(UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and Dragging then
                    local MaxSize = holder.AbsoluteSize
                    local ViewportSize = Camera.ViewportSize
                    CurrentPos = UDim2.new(0, math.clamp(StartPos.X + (input.Position.X - Start.X), 0, ViewportSize.x - MaxSize.x), 0, math.clamp(StartPos.Y + (input.Position.Y - Start.Y + 36), 0, ViewportSize.y - MaxSize.y) + ( Inset.Y / 2 ))
                    holder.Position = CurrentPos
                end
            end))
        
            Utility.Signal(UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Dragging = false
                end
            end))
        end

        -- Elements

        function Library.ColorpickerWindow(self)
            local Popup = {
                Visible = false,

                Tweening = false,

                ZIndex = self.ZIndex,

                Objects = { },

                Flag = nil,

                SetFunc = function() end,

                Alpha = 1,

                Color = Color3.new(1, 1, 1),

                HuePos = nil,
            }

            local ZIndex = Popup.ZIndex

            local Objects = Popup.Objects; do
                Objects.Outline = Utility.New("Frame", {
                    Name = "Outline",
                    Size = UDim2.new(0, 150, 0, 150),
                    BorderSizePixel = 0,
                    Parent = Library.ScreenGui,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                    Visible = false,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Outline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Background = Utility.New("TextButton", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Background,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    Parent = Objects.Background,
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                })

                ZIndex += 1
                
                -- Saturation
                Objects.SaturationOutline = Utility.New("TextButton", {
                    Name = "SaturationOutline",
                    Size = UDim2.new(1, -14, 1, -14),
                    BorderSizePixel = 0,
                    Parent = Objects.Background,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.SaturationOutline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.SaturationBackground = Utility.New("ImageLabel", {
                    Name = "SaturationBackground",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BackgroundColor3 = Color3.fromRGB(0, 0, 255),
                    BorderSizePixel = 0,
                    Parent = Objects.SaturationOutline,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.SaturationBackground,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.SaturationImage = Utility.New("ImageLabel", {
                    Name = "SaturationImage",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.SaturationOutline,
                    BackgroundTransparency = 1,
                    Image = Library.Saturation,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.SaturationImage,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.SaturationPickerOutline = Utility.New("TextButton", {
                    Name = "SaturationPickerOutline",
                    Size = UDim2.new(0, 6, 0, 6),
                    Position = UDim2.new(0, 0, 0, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.SaturationImage,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.SaturationPickerOutline,
                    CornerRadius = UDim.new(1, 0),
                })

                ZIndex += 1

                Objects.SaturationPicker = Utility.New("Frame", {
                    Name = "SaturationPicker",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.SaturationPickerOutline,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.SaturationPicker,
                    CornerRadius = UDim.new(1, 0),
                })

                --

                -- Hue
                Objects.HueOutline = Utility.New("TextButton", {
                    Name = "HueOutline",
                    Size = UDim2.new(0, 12, 1, 0),
                    Position = UDim2.new(1, -12, 0, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.Background,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.HueOutline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.HueBackground = Utility.New("Frame", {
                    Name = "HueBackground",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Parent = Objects.HueOutline,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.HueBackground,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIGradient", {
                    Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))},
                    Rotation = 90,
                    Parent = Objects.HueBackground,
                })

                ZIndex += 1

                Objects.HuePickerOutline = Utility.New("TextButton", {
                    Name = "HuePickerOutline",
                    Size = UDim2.new(0, 10, 0, 10),
                    Position = UDim2.new(0, 0, 0, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.HueBackground,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.HuePickerOutline,
                    CornerRadius = UDim.new(1, 0),
                })

                ZIndex += 1

                Objects.HuePicker = Utility.New("Frame", {
                    Name = "SaturationPicker",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.HuePickerOutline,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.HuePicker,
                    CornerRadius = UDim.new(1, 0),
                })
                --

                -- Alpha
                Objects.AlphaOutline = Utility.New("TextButton", {
                    Name = "AlphaOutline",
                    Size = UDim2.new(1, -14, 0, 12),
                    Position = UDim2.new(0, 0, 1, -12),
                    BorderSizePixel = 0,
                    Parent = Objects.Background,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.AlphaOutline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.AlphaImage = Utility.New("ImageLabel", {
                    Name = "AlphaImage",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BackgroundColor3 = Color3.fromRGB(0, 0, 255),
                    BorderSizePixel = 0,
                    Parent = Objects.AlphaOutline,
                    Image = Library.Checkers,
                    ScaleType = Enum.ScaleType.Tile,
                    TileSize = UDim2.new(0, 6, 0, 6),
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.AlphaImage,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.AlphaBackground = Utility.New("Frame", {
                    Name = "SaturationPicker",
                    Size = UDim2.new(1, 0, 1, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.AlphaImage,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.AlphaBackground,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIGradient", {
                    Parent = Objects.AlphaBackground,
                    Rotation = 180,
                    Transparency = NumberSequence.new({
                        NumberSequenceKeypoint.new(0, 1),
                        NumberSequenceKeypoint.new(1, 0),
                    })
                })

                ZIndex += 1

                Objects.AlphaPickerOutline = Utility.New("TextButton", {
                    Name = "AlphaPickerOutline",
                    Size = UDim2.new(0, 10, 0, 10),
                    Position = UDim2.new(0, 0, 0, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.AlphaBackground,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.AlphaPickerOutline,
                    CornerRadius = UDim.new(1, 0),
                })

                ZIndex += 1

                Objects.AlphaPicker = Utility.New("Frame", {
                    Name = "AlphaPicker",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.AlphaPickerOutline,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.AlphaPicker,
                    CornerRadius = UDim.new(1, 0),
                })
                --
            end

            local Hue, Sat, Val;
            function Popup.Set(color, alpha, ignore)
                alpha = alpha or Popup.Alpha

                Hue, Sat, Val = color:ToHSV()

                Popup.Color = color
                Popup.Alpha = alpha

                if not ignore then
                    Objects.SaturationPickerOutline.Position = UDim2.new(
                        math.clamp(Sat, 0, 1),
                        Sat < 1 and 0 or -6,
                        math.clamp(1 - Val, 0, 1),
                        1 - Val < 1 and 0 or -6
                    )

                    Popup.HuePos = Hue
                    
                    Objects.HuePickerOutline.Position = UDim2.new(
                        0,
                        0,
                        math.clamp(1 - Hue, 0, 1),
                        1 - Hue < 1 and 0 or -10
                    )    

                    Objects.AlphaPickerOutline.Position = UDim2.new(
                        math.clamp(alpha, 0, 1),
                        alpha < 1 and 0 or -10,
                        0,
                        0
                    )     
                end

                if Popup.SetFunc and type(Popup.SetFunc) == "function" then
                    Popup.SetFunc(color, alpha)
                end

                Objects.HuePicker.BackgroundColor3 = Color3.fromHSV(Popup.HuePos, 1, 1)
                Objects.SaturationPicker.BackgroundColor3 = color
                Objects.AlphaPicker.BackgroundColor3 = color

                Objects.AlphaBackground.BackgroundColor3 = color
                Objects.SaturationBackground.BackgroundColor3 = Color3.fromHSV(Popup.HuePos, 1, 1)
            end
            
            function Popup.Open(position)
                if Popup.Tweening then
                    return
                end

                Popup.Tweening = true

                Popup.Visible = not Popup.Visible

                if Popup.Visible then
                    Objects.Outline.Visible = true
                end

                local ParentObjects = Objects.Outline:GetDescendants()

                table.insert(ParentObjects, Objects.Outline)

                for _, obj in ParentObjects do
                    local Index = Utility.GetTransparency(obj)
                    if not Index then continue end

                    if type(Index) == "table" then
                        for _, prop in Index do
                            Library.Fade(obj, prop, Popup.Visible)
                        end
                    else
                        Library.Fade(obj, Index, Popup.Visible)
                    end
                end

                if position then
                    Objects.Outline.Position = UDim2.new(0, position.X, 0, position.Y)
                end

                local Size = Objects.Outline.AbsoluteSize

                Objects.Outline.Size = Popup.Visible and UDim2.new(0, Size.X, 0, 20) or UDim2.new(0, Size.X, 0, Size.Y)

                local Tween = Library.Tween(Objects.Outline, {
                    Size = Popup.Visible and UDim2.new(0, Size.X, 0, Size.Y) or UDim2.new(0, Size.X, 0, 20),
                })

                Utility.Signal(Tween.Completed:Connect(function()
                    Objects.Outline.Visible = Popup.Visible

                    Objects.Outline.Size = UDim2.new(0, Size.X, 0, Size.Y)

                    Popup.Tweening = false
                end))
            end
            
            function Popup.SlideSaturation(input)
                local SizeX = math.clamp((input.Position.X - Objects.SaturationOutline.AbsolutePosition.X) / Objects.SaturationOutline.AbsoluteSize.X, 0, 1)
                local SizeY = 1 - math.clamp((input.Position.Y - Objects.SaturationOutline.AbsolutePosition.Y) / Objects.SaturationOutline.AbsoluteSize.Y, 0, 1)
                
                Objects.SaturationPickerOutline.Position = UDim2.new(SizeX, 0, 1 - SizeY, 0)
                Objects.SaturationPickerOutline.AnchorPoint = Vector2.new(SizeX, 1 - SizeY)

                Popup.Set(Color3.fromHSV(Popup.HuePos, SizeX, SizeY), Popup.Alpha, true)
            end

            Utility.Signal(Objects.SaturationOutline.MouseButton1Down:Connect(function()
                Popup.SlidingSaturation = true
                Popup.SlideSaturation({ Position = UserInputService:GetMouseLocation() - Vector2.new(0, 62) })
            end))

            function Popup.SlideHue(input)
                local SizeY = 1 - math.clamp((input.Position.Y - Objects.HueOutline.AbsolutePosition.Y) / Objects.HueOutline.AbsoluteSize.Y, 0, 1)
                                
                Objects.HuePickerOutline.Position = UDim2.new(0, 0, 1 - SizeY, 0)
                Objects.HuePickerOutline.AnchorPoint = Vector2.new(0, 1 - SizeY)
                Popup.HuePos = SizeY
            
                Popup.Set(Color3.fromHSV(SizeY, Sat, Val), Popup.Alpha, true)
            end

            Utility.Signal(Objects.HueOutline.MouseButton1Down:Connect(function()
                Popup.SlidingHue = true
                Popup.SlideHue({ Position = UserInputService:GetMouseLocation() - Vector2.new(0, 62) })
            end))

            function Popup.SlideAlpha(input)
                local SizeX = math.clamp((input.Position.X - Objects.AlphaOutline.AbsolutePosition.X) / Objects.AlphaOutline.AbsoluteSize.X, 0, 1)
                
                Objects.AlphaPickerOutline.Position = UDim2.new(SizeX, 0, 0, 0)
                Objects.AlphaPickerOutline.AnchorPoint = Vector2.new(SizeX, 0)
                Popup.Set(Popup.Color, SizeX, true)
            end

            Utility.Signal(Objects.AlphaOutline.MouseButton1Down:Connect(function()
                Popup.SlidingAlpha = true
                Popup.SlideAlpha({ Position = UserInputService:GetMouseLocation() })
            end))

            Utility.Signal(UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if Popup.SlidingSaturation then Popup.SlideSaturation({ Position = UserInputService:GetMouseLocation() - Vector2.new(0, 62) }) end
                    if Popup.SlidingHue then Popup.SlideHue({ Position = UserInputService:GetMouseLocation() - Vector2.new(0, 62) }) end
                    if Popup.SlidingAlpha then Popup.SlideAlpha({ Position = UserInputService:GetMouseLocation() }) end
                end
            end))

            Utility.Signal(UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Popup.SlidingSaturation, Popup.SlidingHue, Popup.SlidingAlpha = false, false, false
                end
            end))

            return Popup
        end; Library.ColorpickerWindow = Library.ColorpickerWindow({ ZIndex = 5000 })
        
        function Library.Window(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "User Interface",
                size = UDim2.fromOffset(350, 430),
                open = true,
            })

            local Window = {
                Objects = { },

                Visible = cfg.open,

                Tweening = false,

                TabsTweening = false,

                ZIndex = 0,

                Tabs = { },
            }

            local ZIndex = Window.ZIndex

            local Objects = Window.Objects; do
                Objects.ScreenGui = Utility.New("ScreenGui", {
                    Name = "\0",
                    Parent = HiddenUI,
                    IgnoreGuiInset = true,
                })

                Objects.Outline = Utility.New("Frame", {
                    Name = "Outline",
                    Size = cfg.size,
                    Position = UDim2.new(0.5, -cfg.size.X.Offset / 2, 0.5, -cfg.size.Y.Offset / 2),
                    BorderSizePixel = 0,
                    Parent = Objects.ScreenGui,
                    ZIndex = ZIndex,
                    Visible = Window.Visible,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Page Background" })
                
                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Outline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.SideInline = Utility.New("Frame", {
                    Name = "SideInline",
                    Size = UDim2.new(0, 160, 1, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.SideInline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.SideBackground = Utility.New("Frame", {
                    Name = "SideBackground",
                    Size = UDim2.new(1, -1, 1, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.SideInline,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Dark Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.SideBackground,
                    CornerRadius = UDim.new(0, 5),
                })

                Library.Dragging(Objects.Outline, Objects.SideBackground)

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 8),
                    PaddingBottom = UDim.new(0, 5),
                    Parent = Objects.SideBackground
                })

                ZIndex += 1

                Objects.Title = Utility.New("TextLabel", {
                    Name = "Title",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize + 6,
                    TextYAlignment = Enum.TextYAlignment.Center,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Text = cfg.name,
                    Parent = Objects.SideBackground,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Text" })

                Objects.Title.Size = UDim2.new(1, 0, 0, Objects.Title.TextBounds.Y + 22)

                Objects.SideScroll = Utility.New("ScrollingFrame", {
                    Name = "SideScroll",
                    Size = UDim2.new(1, 0, 1, -Objects.Title.AbsoluteSize.Y),
                    Position = UDim2.fromOffset(0, Objects.Title.AbsoluteSize.Y),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.SideBackground,
                    ZIndex = ZIndex,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    BottomImage = Library.ScrollBar,
                    MidImage = Library.ScrollBar,
                    TopImage = Library.ScrollBar,
                    ScrollBarThickness = 2,
                }, { ScrollBarImageColor3 = "Accent" })

                Objects.SideContent = Utility.New("Frame", {
                    Name = "SideContent",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.SideScroll,
                    ZIndex = ZIndex,
                })
                
                Utility.Signal(Objects.SideScroll:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(function()
                    if Objects.SideScroll.AbsoluteCanvasSize.Y > Objects.SideScroll.AbsoluteSize.Y then
                        Objects.SideContent.Size = UDim2.new(1, -7, 0, 0)
                    else
                        Objects.SideContent.Size = UDim2.new(1, 0, 0, 0)
                    end
                end))

                Utility.Signal(Objects.SideScroll:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
                    if Objects.SideScroll.AbsoluteCanvasSize.Y > Objects.SideScroll.AbsoluteSize.Y then
                        Objects.SideContent.Size = UDim2.new(1, -7, 0, 0)
                    else
                        Objects.SideContent.Size = UDim2.new(1, 0, 0, 0)
                    end
                end))

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.SideContent,
                    Padding = UDim.new(0, 6),
                })

                Window.SideHolder = Objects.SideContent

                Objects.ResizeBar = Utility.New("Frame", {
                    Name = "ResizeBar",
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 5, 0, 5),
                    Position = UDim2.new(1, -5, 1, -5),
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                })

                Library.Resize(Objects.Outline, Objects.ResizeBar)

                Objects.PageHolder = Utility.New("Frame", {
                    Name = "PageHolder",
                    Size = UDim2.new(1, -Objects.SideInline.AbsoluteSize.X, 1, 0),
                    Position = UDim2.new(0, Objects.SideInline.AbsoluteSize.X, 0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                    Parent = Objects.PageHolder
                })

                Window.PageHolder = Objects.PageHolder

                ZIndex += 1
            end; Window.ZIndex = ZIndex

            local AnimationSizeAmount = 20;

            function Window.Open()
                if Window.Tweening then
                    return
                end

                for _,popup in Library.Popups do
                    if popup.Objects.Outline.Visible then
                        popup.Visible(false)
                    end
                end

                for _,dropdown in Library.Dropdowns do
                    if dropdown.Visible then
                        dropdown.Open()
                    end
                end

                -- Safely check ColorpickerWindow
                if Library.ColorpickerWindow and type(Library.ColorpickerWindow) == "table" and Library.ColorpickerWindow.Visible then
                    if Library.ColorpickerWindow.Open and type(Library.ColorpickerWindow.Open) == "function" then
                        Library.ColorpickerWindow.Open()
                    end
                end

                Window.Tweening = true

                Window.Visible = not Window.Visible

                if Window.Visible then
                    Objects.Outline.Visible = true
                end

                for _,obj in Objects.ScreenGui:GetDescendants() do
                    local Index = Utility.GetTransparency(obj)

                    if not Index then continue end

                    if type(Index) == "table" then
                        for _,prop in Index do
                            Library.Fade(obj, prop, Window.Visible)
                        end
                    else
                        Library.Fade(obj, Index, Window.Visible)
                    end
                end

                local OldSize = Objects.Outline.AbsoluteSize

                Objects.Outline.Size = Window.Visible and UDim2.fromOffset(OldSize.X - AnimationSizeAmount, OldSize.Y - AnimationSizeAmount) or UDim2.fromOffset(OldSize.X, OldSize.Y)

                local Tween = Library.Tween(Objects.Outline, { Size = Window.Visible and UDim2.fromOffset(OldSize.x, OldSize.y) or UDim2.fromOffset(OldSize.x - AnimationSizeAmount, OldSize.y - AnimationSizeAmount) })

                Utility.Signal(Tween.Completed:Connect(function()
                    Objects.Outline.Size = UDim2.fromOffset(OldSize.X, OldSize.Y)
                    Window.Tweening = false
                    Objects.Outline.Visible = Window.Visible
                end))
            end

            return setmetatable(Window, Library)
        end

        function Library.Info(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "Misc"
            })

            local Info = {
                Objects = { },
                ZIndex = self.ZIndex
            }

            local ZIndex = Info.ZIndex

            local Objects = Info.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Parent = self.SideHolder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 7),
                    PaddingRight = UDim.new(0, 7),
                    PaddingTop = UDim.new(0, 0),
                    PaddingBottom = UDim.new(0, 0),
                    Parent = Objects.Holder
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize - 2,
                    FontFace = Library.Font,
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.XY,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    Text = cfg.name,
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                ZIndex += 1
            end; Info.ZIndex = ZIndex

            return setmetatable(Info, Library)
        end

        function Library.Tab(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Tab",
                icon = "rbxassetid://284402752"
            })

            local Tab = {
                ZIndex = self.ZIndex,

                Tweening = false,

                Objects = { },

                Sections = { },

                Name = cfg.name,
            }

            local ZIndex = Tab.ZIndex

            local Objects = Tab.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Parent = self.SideHolder,
                    ZIndex = ZIndex,
                })

                ZIndex += 1

                Objects.Background = Utility.New("TextButton", {
                    Name = "Background",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Background" })

                ZIndex += 1

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Background,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    Parent = Objects.Background,
                    PaddingLeft = UDim.new(0, 8),
                    PaddingRight = UDim.new(0, 8),
                    PaddingTop = UDim.new(0, 6),
                    PaddingBottom = UDim.new(0, 6),
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    Parent = Objects.Background,
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 7),
                })

                if cfg.icon then
                    Objects.Icon = Utility.New("ImageLabel", {
                        Name = "Icon",
                        Size = UDim2.new(0, 20, 0, 20),
                        Position = UDim2.new(0, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.XY,
                        BackgroundTransparency = 1,
                        Image = cfg.icon,
                        Parent = Objects.Background,
                        ZIndex = ZIndex,
                    }, { ImageColor3 = "Dark Text" })
                end

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    --AutomaticSize = Enum.AutomaticSize.XY,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    Text = cfg.name,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Objects.Text.Size = UDim2.new(0, Objects.Text.TextBounds.X, 0, Objects.Text.TextBounds.Y - 2)

                if Objects.Icon then
                    Objects.Icon.Size = UDim2.new(0, Objects.Text.TextBounds.Y, 0, Objects.Text.TextBounds.Y)
                end

                Objects.Page = Utility.New("Frame", {
                    Name = "Page",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Parent = self.PageHolder,
                    Visible = false,
                    ZIndex = ZIndex,
                })

                ZIndex += 1

                Objects.Left = Utility.New("Frame", {
                    Name = "Left",
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Size = UDim2.new(0.5, -2, 1, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Parent = Objects.Page,
                    ZIndex = ZIndex,
                })

                table.insert(Tab.Sections, Objects.Left)

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    Parent = Objects.Left,
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    VerticalFlex = Enum.UIFlexAlignment.Fill,
                    Padding = UDim.new(0, 4),
                })

                Tab.left = Objects.Left

                Objects.Right = Utility.New("Frame", {
                    Name = "Right",
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Size = UDim2.new(0.5, -2, 1, 0),
                    Position = UDim2.new(0.5, 2, 0, 0),
                    Parent = Objects.Page,
                    ZIndex = ZIndex,
                })

                table.insert(Tab.Sections, Objects.Right)

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    Parent = Objects.Right,
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    VerticalFlex = Enum.UIFlexAlignment.Fill,
                    Padding = UDim.new(0, 4),
                })

                Tab.right = Objects.Right
            end; Tab.ZIndex = ZIndex

            function Tab.Set(status, nested)
                Library.Tween(Objects.Background, {
                    BackgroundTransparency = status and 0 or 1,
                })

                Library.ChangeObjectTheme(Objects.Text, {
                    TextColor3 = status and "Text" or "Dark Text",
                }, true)

                if Objects.Icon then
                    Library.ChangeObjectTheme(Objects.Icon, {
                        ImageColor3 = status and "Text" or "Dark Text",
                    }, true)
                end

                Objects.Page.Visible = status

                if not self.TabsTweening then 
                    if not nested then
                        self.TabsTweening = true

                        for _,tab in self.Tabs do
                            if tab.Name == Tab.Name then continue end

                            tab.Set(false, true)
                        end

                        -- if self.TabsTweening then
                        --     return
                        -- end

                        for _,obj in Objects.Page:GetDescendants() do
                            local Index = Utility.GetTransparency(obj)

                            if not Index then continue end

                            if type(Index) == "table" then
                                for _,prop in Index do
                                    Library.Fade(obj, prop, status)
                                end
                            else
                                Library.Fade(obj, Index, status)
                            end
                        end

                        Objects.Page.Position = status and UDim2.fromOffset(0, 20) or UDim2.fromOffset(0, 0)

                        local Tween = Library.Tween(Objects.Page, {
                            Position = status and UDim2.fromOffset(0, 0) or UDim2.fromOffset(0, 20),
                        })

                        Utility.Signal(Tween.Completed:Connect(function()
                            self.TabsTweening = false
                        end))
                    end
                end
            end

            Utility.Signal(Objects.Background.MouseButton1Click:Connect(function()
                Tab.Set(true)
            end))

            table.insert(self.Tabs, Tab)
            
            return setmetatable(Tab, Library)
        end

        function Library.Section(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Section",
                description = nil,
                side = "left",
                size = 1,
            })

            local Section = {
                ZIndex = self.ZIndex,

                Objects = { },

                Resizing = false,

                Dragging = false,
            }

            local Parent = self[cfg.side:lower()]

            local ZIndex = Section.ZIndex

            local Objects = Section.Objects; do
                Objects.Outline = Utility.New("Frame", {
                    Name = "Background",
                    BorderSizePixel = 0,
                    Size = UDim2.fromScale(1, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Parent = Parent,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Section Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Outline,
                    CornerRadius = UDim.new(0, 5),
                })

                Objects.Constraint = Utility.New("UISizeConstraint", {
                    Parent = Objects.Outline,
                    MinSize = Vector2.new( math.huge, cfg.size or math.huge ),
                    MinSize = Vector2.new( 0, 40 ),
                })

                ZIndex += 1

                Objects.Dragging = Utility.New("TextButton", {
                    Name = "Dragging",
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 5),
                    Position = UDim2.new(0, 0, 0, 0),
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                })

                ZIndex += 1

                Objects.TopInline = Utility.New("Frame", {
                    Name = "TopInline",
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Position = UDim2.new(0, 0, 0, 0),
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.TopInline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.TopBackground = Utility.New("Frame", {
                    Name = "TopBackground",
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, -1),
                    Position = UDim2.new(0, 0, 0, 0),
                    Parent = Objects.TopInline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.TopBackground,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    Parent = Objects.TopBackground,
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 2),
                    PaddingBottom = UDim.new(0, 5),
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.TopBackground,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.Title = Utility.New("TextLabel", {
                    Name = "Title",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Text = cfg.name,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.TopBackground,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Text" })

                ZIndex += 1

                if cfg.description then
                    Objects.Description = Utility.New("TextLabel", {
                        Name = "Description",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize - 2,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.description,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.TopBackground,
                        ZIndex = ZIndex,
                        TextWrapped = true,
                    }, { TextColor3 = "Light Text" })

                    ZIndex += 1
                end

                Objects.TopCoverInline = Utility.New("Frame", {
                    Name = "TopCoverInline",
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 4),
                    Position = UDim2.new(0, 0, 0, Objects.TopInline.AbsoluteSize.Y - 4),
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                ZIndex += 1

                Objects.TopCoverBackground = Utility.New("Frame", {
                    Name = "TopCoverBackground",
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, -1),
                    Position = UDim2.new(0, 0, 0, 0),
                    Parent = Objects.TopCoverInline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                ZIndex += 1

                Objects.Padded = Utility.New("Frame", {
                    Name = "Padded",
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -10, 1, -(Objects.TopBackground.AbsoluteSize.Y + 10)),
                    Position = UDim2.new(0, 5, 0, Objects.TopBackground.AbsoluteSize.Y + 5),
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                })

                ZIndex += 1

                Objects.Scrolling = Utility.New("ScrollingFrame", {
                    Name = "Scrolling",
                    Size = UDim2.new(1, 0, 1, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Padded,
                    ZIndex = ZIndex,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    BottomImage = Library.ScrollBar,
                    MidImage = Library.ScrollBar,
                    TopImage = Library.ScrollBar,
                    ScrollBarThickness = 2,
                }, { ScrollBarImageColor3 = "Accent" })

                ZIndex += 1

                Objects.Content = Utility.New("Frame", {
                    Name = "Content",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Scrolling,
                    ZIndex = ZIndex,
                })

                Section.Holder = Objects.Content
                
                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Content,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

                Utility.Signal(Objects.Scrolling:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(function()
                    if Objects.Scrolling.AbsoluteCanvasSize.Y > Objects.Scrolling.AbsoluteSize.Y then
                        Objects.Content.Size = UDim2.new(1, -7, 0, 0)
                    else
                        Objects.Content.Size = UDim2.new(1, 0, 0, 0)
                    end
                end))

                Utility.Signal(Objects.Scrolling:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
                    if Objects.Scrolling.AbsoluteCanvasSize.Y > Objects.Scrolling.AbsoluteSize.Y then
                        Objects.Content.Size = UDim2.new(1, -7, 0, 0)
                    else
                        Objects.Content.Size = UDim2.new(1, 0, 0, 0)
                    end
                end))

                Objects.ResizeBar = Utility.New("TextButton", {
                    Name = "ResizeBar",
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 3),
                    Position = UDim2.new(0, 0, 1, -3),
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                })
            end; Section.ZIndex = ZIndex

            -- Resizing
                Utility.Signal(Objects.ResizeBar.MouseButton1Down:Connect(function()
                    Library.ChangeObjectTheme(Objects.Title, {
                        TextColor3 = "Accent",
                    }, true)

                    Section.Resizing = true

                    local Resize = Utility.Signal(UserInputService.InputChanged:Connect(function(input)
                        if not Section.Resizing or input.UserInputType ~= Enum.UserInputType.MouseMovement then 
                            return 
                        end
        
                        Objects.Constraint.MaxSize = Vector2.new( math.huge, math.clamp( input.Position.Y - Objects.Outline.AbsolutePosition.Y, 25, 9e9 ) )                
                    end))

                    local ResizeStop; ResizeStop = Utility.Signal(UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then 
                            Section.Resizing = false 
                            Resize:Disconnect()
                            ResizeStop:Disconnect()

                            Library.ChangeObjectTheme(Objects.Title, {
                                TextColor3 = "Text",
                            }, true)
                        end
                    end))
                end))
            --

            -- Dragging
                Section.OldParent = Objects.Outline.Parent

                Utility.Signal(Objects.Dragging.MouseButton1Down:Connect(function()
                    Section.Dragging = true

                    local MousePosition = UserInputService:GetMouseLocation()

                    local Offset = Vector2.new( MousePosition.X - Objects.Dragging.AbsolutePosition.X, MousePosition.Y - Objects.Dragging.AbsolutePosition.Y )

                    Objects.Outline.Size = UDim2.new( 0, Objects.Outline.AbsoluteSize.X, 0, Objects.Outline.AbsoluteSize.Y )
                    Objects.Outline.Position = UDim2.new( 0, Objects.Outline.AbsolutePosition.X, 0, Objects.Outline.AbsolutePosition.Y )
                    Objects.Outline.Parent = Library.ScreenGui

                    local ClosestHolder, Indicator;

                    local Drag = Utility.Signal(UserInputService.InputChanged:Connect(function(input)
                        if not Section.Dragging or input.UserInputType ~= Enum.UserInputType.MouseMovement then 
                            return 
                        end
                        
                        Objects.Outline.Position = UDim2.new(0, input.Position.X - Offset.X, 0, input.Position.Y - Offset.Y)

                        local MinDistance = math.huge
                        for _,holder in self.Sections do
                            local Distance = ( Vector2.new( input.Position.x, input.Position.y ) - holder.AbsolutePosition ).Magnitude
                            
                            if Distance < MinDistance then
                                MinDistance = Distance
                                ClosestHolder = holder
                            end
                        end
                        
                        if ClosestHolder then
                            if not Indicator then
                                Indicator = Utility.New("Frame", {
                                    Parent = ClosestHolder,
                                    BorderSizePixel = 0,
                                    Size = UDim2.new(1, 0, 0, Objects.Outline.AbsoluteSize.Y),
                                    ZIndex = 5000,
                                }, { BackgroundColor3 = "Accent" })

                                Utility.New("UICorner", {
                                    Name = "UICorner",
                                    Parent = Indicator,
                                    CornerRadius = UDim.new(0, 5),
                                })

                                local Background = Utility.New("Frame", {
                                    Parent = Indicator,
                                    BorderSizePixel = 0,
                                    Size = UDim2.new(1, -2, 1, -2),
                                    Position = UDim2.new(0, 1, 0, 1),
                                    ZIndex = 5001,
                                }, { BackgroundColor3 = "Section Background" })

                                Utility.New("UICorner", {
                                    Name = "UICorner",
                                    Parent = Background,
                                    CornerRadius = UDim.new(0, 5),
                                })

                                Utility.New("UISizeConstraint", { 
                                    Parent = Indicator,
                                    MaxSize = Objects.Constraint.MaxSize,
                                    MinSize = Objects.Constraint.MinSize,
                                })
                            end

                            Indicator.Parent = ClosestHolder
                            Indicator.Position = UDim2.new( 0, 0, 0, 0 )
                            Indicator.Visible = true
                        else
                            if Indicator then
                                Indicator:Destroy()
                                Indicator = nil
                            end
                        end
                    end))

                    local DragStop; DragStop = Utility.Signal(UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Section.Dragging = false 
                            Drag:Disconnect( )
                            DragStop:Disconnect( )
        
                            Objects.Outline.Position = UDim2.new( )
                            Objects.Outline.Size = UDim2.new( 1, 0, 0, 0 )
                            
                            if ClosestHolder then
                                Objects.Outline.Parent = ClosestHolder
                            else
                                Objects.Outline.Parent = Section.OldParent
                            end
        
                            if Indicator then
                                Indicator:Destroy()
                            end
                        end
                    end))
                end))
            --

            -- table.insert(self.Sections, Section)

            return setmetatable(Section, Library)
        end

        function Library.PopupMenu(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                size = 120
            })

            local Popup = {
                Tweening = false,

                Objects = {},

                ZIndex = self.ZIndex,
                
                -- Добавим новое свойство для отслеживания родительского PopupMenu
                ParentPopup = nil,
                
                -- Добавим свойство для хранения вложенных PopupMenu
                ChildPopups = {},
            }

            local ZIndex = Popup.ZIndex

            local Objects = Popup.Objects; do
                Objects.Outline = Utility.New("Frame", {
                    Name = "Outline",
                    Size = UDim2.new(0, cfg.size, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = Library.ScreenGui,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                    Visible = false,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Outline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Background = Utility.New("TextButton", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    --AutomaticSize = Enum.AutomaticSize.Y,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Background,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    Parent = Objects.Background,
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),
                })

                Popup.Holder = Objects.Holder
            end; Popup.ZIndex = ZIndex

                function Popup.Visible(visibility, position, stopPropagation)
        if Popup.Tweening then
            return
        end

        Popup.Tweening = true

        if visibility then
            Objects.Outline.Visible = true
            
            if not stopPropagation then
                -- Получаем цепочку родительских поп-апов для текущего поп-апа
                local parentChain = Popup:GetParentChain()
                local parentChainMap = {}
                for _, parent in ipairs(parentChain) do
                    parentChainMap[parent] = true
                end
                
                -- Закрываем только popups одного родителя и того же уровня вложенности
                -- Не трогаем popups из родительской цепочки и других ветвей иерархии
                if Popup.ParentPopup and Popup.ParentElement then
                    for _, childPopup in pairs(Popup.ParentPopup.ChildPopups) do
                        -- Не закрываем себя и поп-апы в родительской цепочке
                        if childPopup ~= Popup and not parentChainMap[childPopup] and 
                           childPopup.Objects.Outline.Visible and childPopup.ParentElement == Popup.ParentElement then
                            childPopup.Visible(false, nil, true) -- stopPropagation=true, чтобы не затрагивать дочерние
                        end
                    end
                elseif not Popup.ParentPopup then
                    -- Если это корневой popup, закрываем только те корневые popups, которые относятся к тому же элементу
                    for _, popup in pairs(Library.Popups) do
                        if popup ~= Popup and not parentChainMap[popup] and 
                           popup.Objects.Outline.Visible and not popup.ParentPopup and 
                           popup.ParentElement == Popup.ParentElement then
                            popup.Visible(false, nil, true) -- stopPropagation=true, чтобы не затрагивать дочерние
                        end
                    end
                end
            end
        end

                local ParentObjects = Objects.Outline:GetDescendants()

                table.insert(ParentObjects, Objects.Outline)

                for _,obj in ParentObjects do
                    local Index = Utility.GetTransparency(obj)

                    if not Index then continue end

                    if type(Index) == "table" then
                        for _,prop in Index do
                            Library.Fade(obj, prop, visibility)
                        end
                    else
                        Library.Fade(obj, Index, visibility)
                    end
                end

                local OldSize = Objects.Outline.AbsoluteSize

                Objects.Outline.AutomaticSize = Enum.AutomaticSize.None

                Objects.Outline.Size = visibility and UDim2.new(0, cfg.size, 0, 0) or UDim2.new(0, cfg.size, 0, OldSize.Y)

                if position then
                    Objects.Outline.Position = UDim2.new(0, position.X, 0, position.Y)
                end

                local Tween = Library.Tween(Objects.Outline, {
                    Size = visibility and UDim2.new(0, cfg.size, 0, OldSize.Y) or UDim2.new(0, cfg.size, 0, 0),
                })

                Utility.Signal(Tween.Completed:Connect(function()
                    Popup.Tweening = false

                    Objects.Outline.Size = UDim2.new(0, cfg.size, 0, 0)

                    Objects.Outline.AutomaticSize = Enum.AutomaticSize.Y

                    Objects.Outline.Visible = visibility
                    
                    -- Если popup закрывается, закрываем все его дочерние popups,
                    -- но только если это не операция переключения в иерархии
                    if not visibility and not stopPropagation then
                        for _, childPopup in pairs(Popup.ChildPopups) do
                            if childPopup.Objects.Outline.Visible then
                                childPopup.Visible(false)
                            end
                        end
                    end
                end))
            end
            
            -- Добавляем новый метод для создания вложенного PopupMenu
            function Popup:NestedPopup(cfg)
                local NestedPopup = Library.PopupMenu(self, cfg)
                NestedPopup.ParentPopup = self
                table.insert(self.ChildPopups, NestedPopup)
                return NestedPopup
            end
            
            -- Рекурсивная функция для получения цепочки родительских поп-апов
            function Popup:GetParentChain()
                local chain = {}
                
                local current = self
                while current do
                    table.insert(chain, current)
                    current = current.ParentPopup
                end
                
                return chain
            end

            table.insert(Library.Popups, Popup)

            return setmetatable(Popup, Library)
        end

        function Library.Popup(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                size = 120,
            })

            local Cog = {
                Objects = { },

                ZIndex = self.ZIndex,

                Visible = false,
            }

            local ZIndex = Cog.ZIndex

            local Objects = Cog.Objects; do
                Objects.Icon = Utility.New("ImageButton", {
                    Name = "Icon",
                    Size = UDim2.new(0, self.SideHolder.AbsoluteSize.Y, 0, self.SideHolder.AbsoluteSize.Y),
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Image = "rbxassetid://81593156472608",
                    Parent = self.SideHolder,
                    ZIndex = ZIndex,
                }, { ImageColor3 = "Dark Text" })
            end

            local Popup = self:PopupMenu(cfg)

            Popup.BoundObjects = {
                Objects.Icon,
                Popup.Objects.Outline,
                (Library.ColorpickerWindow and type(Library.ColorpickerWindow) == "table" and Library.ColorpickerWindow.Objects and Library.ColorpickerWindow.Objects.Outline) or nil,
            }
            
            -- Добавляем родительский объект для отслеживания связи
            Popup.ParentElement = self

            function Cog.InsideBounds(input)
                -- Проверяем основные объекты
                for _,obj in Popup.BoundObjects do
                    if obj and Utility.MouseOver(obj, input) then
                        return true
                    end
                end
                
                -- Также проверяем все вложенные попапы
                for _, childPopup in pairs(Popup.ChildPopups) do
                    if childPopup.Objects.Outline.Visible then
                        -- Проверяем сам popup
                        if Utility.MouseOver(childPopup.Objects.Outline, input) then
                            return true
                        end
                        
                        -- Рекурсивно проверяем дочерние popups
                        for _, nestedObj in pairs(childPopup.BoundObjects or {}) do
                            if nestedObj and Utility.MouseOver(nestedObj, input) then
                                return true
                            end
                        end
                    end
                end
                
                return false
            end

            -- Глобальный обработчик кликов для поп-апов
            -- Перемещаем его из индивидуальных поп-апов в единый обработчик
            if not Library.GlobalPopupClickHandler then
                Library.GlobalPopupClickHandler = true
                
                Utility.Signal(UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                        return -- Обрабатываем только левые клики
                    end
                    
                    -- Функция для проверки, относится ли элемент к GUI библиотеки
                    local function isLibraryUI(obj)
                        while obj do
                            if obj == Library.ScreenGui then
                                return true
                            end
                            obj = obj.Parent
                        end
                        return false
                    end
                    
                    -- Проверяем, попал ли клик в какой-то UI элемент библиотеки
                    local ignoreCloseCheck = false
                    local guiObjectsAtPosition = game:GetService("CoreGui"):GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)
                    for _, obj in ipairs(guiObjectsAtPosition) do
                        if isLibraryUI(obj) then
                            -- Если кликнули по иконке или элементу поп-апа, не закрываем поп-апы
                            if obj:IsA("ImageButton") or obj:IsA("TextButton") then
                                ignoreCloseCheck = true
                                break
                            end
                        end
                    end
                    
                    if ignoreCloseCheck then
                        return -- Кликнули по кнопке или иконке, игнорируем проверку закрытия
                    end
                    
                    -- Проверяем все открытые поп-апы
                    for _, popup in pairs(Library.Popups) do
                        if popup.Objects.Outline.Visible then
                            -- Рекурсивная функция для проверки, находится ли курсор внутри поп-апа или его дочерних элементов
                            local function isInsidePopupHierarchy(p, input)
                                if Utility.MouseOver(p.Objects.Outline, input) then
                                    return true
                                end
                                
                                -- Проверяем дочерние поп-апы
                                for _, child in pairs(p.ChildPopups) do
                                    if child.Objects.Outline.Visible and isInsidePopupHierarchy(child, input) then
                                        return true
                                    end
                                end
                                
                                -- Проверяем дропдауны внутри поп-апа
                                for _, dropdown in pairs(Library.Dropdowns) do
                                    if dropdown.Visible and dropdown.Popup and dropdown.Popup.Outline then
                                        -- Проверяем, принадлежит ли дропдаун к этому поп-апу
                                        local dropdownParent = dropdown.Popup.Outline.Parent
                                        while dropdownParent do
                                            if dropdownParent == p.Objects.Outline then
                                                if Utility.MouseOver(dropdown.Popup.Outline, input) then
                                                    return true
                                                end
                                                break
                                            end
                                            dropdownParent = dropdownParent.Parent
                                        end
                                    end
                                end
                                
                                return false
                            end
                            
                            -- Если курсор не внутри поп-апа или его дочерних элементов, закрываем его
                            if not isInsidePopupHierarchy(popup, input) then
                                -- Проверяем, не относится ли этот поп-ап к какому-то родителю, в котором находится курсор
                                local isChildOfActiveParent = false
                                local function isInParentOfPopup(p, input)
                                    if p.ParentPopup and p.ParentPopup.Objects.Outline.Visible then
                                        if Utility.MouseOver(p.ParentPopup.Objects.Outline, input) then
                                            return true
                                        end
                                        return isInParentOfPopup(p.ParentPopup, input)
                                    end
                                    return false
                                end
                                
                                -- Если поп-ап не находится в родительской цепочке с курсором, закрываем его
                                if not isInParentOfPopup(popup, input) and popup.ParentElement then
                                    -- Закрываем все дропдауны внутри поп-апа
                                    for _, dropdown in pairs(Library.Dropdowns) do
                                        if dropdown.Visible and dropdown.Popup and dropdown.Popup.Outline then
                                            local dropdownParent = dropdown.Popup.Outline.Parent
                                            while dropdownParent do
                                                if dropdownParent == popup.Objects.Outline then
                                                    dropdown.Open()
                                                    break
                                                end
                                                dropdownParent = dropdownParent.Parent
                                            end
                                        end
                                    end
                                    
                                    popup.Visible(false, nil, true)
                                    
                                    -- Меняем цвет иконки
                                    if popup.ParentElement.Objects and popup.ParentElement.Objects.Icon then
                                        Library.ChangeObjectTheme(popup.ParentElement.Objects.Icon, {
                                            ImageColor3 = "Dark Text",
                                        }, true)
                                    end
                                end
                            end
                        end
                    end
                end))
            end

            -- Глобальный обработчик кликов для дропдаунов
            if not Library.GlobalDropdownClickHandler then
                Library.GlobalDropdownClickHandler = true
                
                Utility.Signal(UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                        return -- Обрабатываем только левые клики
                    end
                    
                    -- Функция для проверки, относится ли элемент к GUI библиотеки
                    local function isLibraryUI(obj)
                        while obj do
                            if obj == Library.ScreenGui then
                                return true
                            end
                            obj = obj.Parent
                        end
                        return false
                    end
                    
                    -- Проверяем, попал ли клик в какой-то UI элемент библиотеки
                    local ignoreCloseCheck = false
                    local guiObjectsAtPosition = game:GetService("CoreGui"):GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)
                    for _, obj in ipairs(guiObjectsAtPosition) do
                        if isLibraryUI(obj) then
                            -- Если кликнули по кнопке дропдауна или элементу внутри дропдауна, не закрываем дропдауны
                            if obj:IsA("TextButton") and (obj.Name == "Outline" or obj.Name == "Text") then
                                ignoreCloseCheck = true
                                break
                            end
                            -- Если кликнули по элементу поп-апа, не закрываем дропдауны
                            if obj:IsA("TextButton") and obj.Name == "Background" then
                                local parent = obj.Parent
                                while parent do
                                    if parent.Name == "Outline" and parent.Parent == Library.ScreenGui then
                                        ignoreCloseCheck = true
                                        break
                                    end
                                    parent = parent.Parent
                                end
                                if ignoreCloseCheck then break end
                            end
                        end
                    end
                    
                    if ignoreCloseCheck then
                        return -- Кликнули по кнопке дропдауна, игнорируем проверку закрытия
                    end
                    
                    -- Проверяем все открытые дропдауны
                    for _, dropdown in pairs(Library.Dropdowns) do
                        if dropdown.Visible and dropdown.Popup and dropdown.Popup.Outline then
                            -- Если курсор не внутри дропдауна, закрываем его
                            if not Utility.MouseOver(dropdown.Popup.Outline, input) then
                                -- Проверяем, не кликнули ли мы по самому дропдауну
                                local clickedOnDropdown = false
                                if dropdown.Objects and dropdown.Objects.Outline then
                                    clickedOnDropdown = Utility.MouseOver(dropdown.Objects.Outline, input)
                                end
                                
                                -- Проверяем, не кликнули ли мы по элементу внутри дропдауна
                                local clickedOnDropdownItem = false
                                if dropdown.Popup and dropdown.Popup.Background then
                                    clickedOnDropdownItem = Utility.MouseOver(dropdown.Popup.Background, input)
                                end
                                
                                if not clickedOnDropdown and not clickedOnDropdownItem then
                                    dropdown.Open()
                                end
                            end
                        end
                    end
                end))
            end

            Utility.Signal(Objects.Icon:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
                if Popup.Objects.Outline.Visible then
                    local AbsolutePosition = Objects.Icon.AbsolutePosition
                    local AbsoluteSize = Objects.Icon.AbsoluteSize

                    Popup.Objects.Outline.Position = UDim2.new(0, AbsolutePosition.x, 0, AbsolutePosition.y + AbsoluteSize.y + 5)
                end
            end))

            Utility.Signal(Objects.Icon.MouseButton1Click:Connect(function()
                Cog.Visible = not Cog.Visible

                local AbsolutePosition = Objects.Icon.AbsolutePosition
                local AbsoluteSize = Objects.Icon.AbsoluteSize
                local Position = Vector2.new(AbsolutePosition.x, AbsolutePosition.y + AbsoluteSize.y + 5)

                Library.ChangeObjectTheme(Objects.Icon, {
                    ImageColor3 = Cog.Visible and "Text" or "Dark Text",
                }, true)

                -- Важно: не закрываем родительские поп-апы при переключении
                local stopPropagation = true
                Popup.Visible(Cog.Visible, Position, stopPropagation)
            end))

            return Popup
        end

        function Library.Toggle(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Toggle",
                description = nil,
                value = false,
                callback = function() end,
                flag = nil,

                children = nil, -- beta......
            })

            if not cfg.flag then
                cfg.flag = cfg.name
            end

            local Toggle = {
                Objects = { },

                Tweening = false,

                ZIndex = self.ZIndex,

                Value = false,
            }

            local ZIndex = Toggle.ZIndex

            local Objects = Toggle.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Line = Utility.New("TextButton", {
                    Name = "Line",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Line,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Text = cfg.name,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Line,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.Text,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.SideHolder = Utility.New("Frame", {
                    Name = "SideHolder",
                    Size = UDim2.new(0, 0, 1, 0),
                    AutomaticSize = Enum.AutomaticSize.X,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.SideHolder,
                    Padding = UDim.new(0, 2),
                }) 

                Toggle.SideHolder = Objects.SideHolder

                ZIndex += 1

                if cfg.description then
                    Objects.Description = Utility.New("TextLabel", {
                        Name = "Description",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize - 2,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.description,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Line,
                        ZIndex = ZIndex,
                        TextWrapped = true,
                    }, { TextColor3 = "Light Text" })

                    ZIndex += 1
                end

                Objects.Outline = Utility.New("Frame", {
                    Name = "Outline",
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    BackgroundTransparency = 0,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Objects.Outline.Size = UDim2.new(0, Objects.Text.AbsoluteSize.Y, 0, Objects.Text.AbsoluteSize.Y)

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background
                })  

                ZIndex += 1

                if cfg.children ~= nil then
                    Objects.ChildrenHolder = Utility.New("Frame", {
                        Name = "ChildrenHolder",
                        Size = UDim2.new(1, 0, 0, 0),
                        Position = UDim2.fromOffset(0, 0),
                        BackgroundTransparency = 1,
                        AutomaticSize = Enum.AutomaticSize.Y,
                        BorderSizePixel = 0,
                        Parent = Objects.Holder,
                        ZIndex = ZIndex,
                        Visible = cfg.children,
                        ClipsDescendants = true,
                    })

                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Vertical,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Parent = Objects.ChildrenHolder,
                        Padding = UDim.new(0, 5),
                    })

                    Toggle.Holder = Objects.ChildrenHolder

                    ZIndex += 1
                end
            end; Toggle.ZIndex = ZIndex

            function Toggle.Children(visibility)
                if cfg.children == nil and not Toggle.Holder then
                    return
                end

                if Toggle.Tweening then
                    return
                end

                if visibility == Objects.ChildrenHolder.Visible then
                    return
                end

                Toggle.Tweening = true

                if visibility then
                    Objects.ChildrenHolder.Visible = true
                end

                for _,obj in Objects.ChildrenHolder:GetDescendants() do
                    local Index = Utility.GetTransparency(obj)

                    if not Index then continue end

                    if type(Index) == "table" then
                        for _,prop in Index do
                            Library.Fade(obj, prop, visibility)
                        end
                    else
                        Library.Fade(obj, Index, visibility)
                    end
                end

                local OldSize = Objects.ChildrenHolder.AbsoluteSize

                Objects.ChildrenHolder.AutomaticSize = Enum.AutomaticSize.None

                Objects.ChildrenHolder.Size = visibility and UDim2.new(1, 0, 0, 0) or UDim2.new(1, 0, 0, OldSize.Y)

                local Tween = Library.Tween(Objects.ChildrenHolder, {
                    Size = visibility and UDim2.new(1, 0, 0, OldSize.Y) or UDim2.new(1, 0, 0, 0)
                })

                Utility.Signal(Tween.Completed:Connect(function()
                    Toggle.Tweening = false

                    Objects.ChildrenHolder.Size = UDim2.new(1, 0, 0, 0)

                    Objects.ChildrenHolder.AutomaticSize = Enum.AutomaticSize.Y

                    Objects.ChildrenHolder.Visible = visibility
                end))
            end

            function Toggle.Set(value)
                if Toggle.Tweening then
                    return
                end

                Toggle.Value = value

                Toggle.Children(value)

                Library.ChangeObjectTheme(Objects.Background, {
                    BackgroundColor3 = value and "Accent" or "Background"
                }, true)

                Library.ChangeObjectTheme(Objects.Text, {
                    TextColor3 = value and "Text" or "Dark Text"
                }, true)

                cfg.callback(value)

                Library.Flags[cfg.flag] = value
            end

            function Toggle.Enable()
                Toggle.Set(not Toggle.Value)
            end

            Utility.Signal(Objects.Line.MouseButton1Click:Connect(Toggle.Enable))

            Toggle.Set(cfg.value)

            Library.ConfigFlags[cfg.flag] = Toggle.Set

            return setmetatable(Toggle, Library)
        end

        function Library.Slider(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Slider",
                description = nil,
                value = 50,
                min = 0,
                max = 100,
                float = 1,
                suffix = "%s",
                callback = function() end,
                flag = nil,
                children = nil,
            })

            if not cfg.flag then
                cfg.flag = cfg.name
            end

            local Slider = {
                Tweening = false,

                Objects = { },
                
                ZIndex = self.ZIndex,

                Value = cfg.value,

                Sliding = false,
            }

            local ZIndex = Slider.ZIndex

            local Objects = Slider.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    ZIndex = ZIndex,
                })


                Utility.New("UIPadding", {
                    Parent = Objects.Holder,
                    PaddingBottom = UDim.new(0, 2),
                })


                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Line = Utility.New("TextButton", {
                    Name = "Line",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,    
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Line,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Text = cfg.name,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Line,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.Text,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.SideHolder = Utility.New("Frame", {
                    Name = "SideHolder",
                    Size = UDim2.new(0, 0, 1, 0),
                    AutomaticSize = Enum.AutomaticSize.X,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.SideHolder,
                    Padding = UDim.new(0, 2),
                }) 

                Slider.SideHolder = Objects.SideHolder

                ZIndex += 1

                Objects.Value = Utility.New("TextLabel", {
                    Name = "Value",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.XY,
                    Text = "",
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                ZIndex += 1

                if cfg.description then
                    Objects.Description = Utility.New("TextLabel", {
                        Name = "Description",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize - 2,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.description,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Line,
                        ZIndex = ZIndex,
                        TextWrapped = true,
                    }, { TextColor3 = "Light Text" })

                    ZIndex += 1
                end

                Objects.Outline = Utility.New("TextButton", {
                    Name = "Line",
                    Size = UDim2.new(1, 0, 0, 8),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline,
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                ZIndex += 1

                Objects.Accent = Utility.New("Frame", {
                    Name = "Accent",
                    Size = UDim2.new(0, 0, 1, 0),
                    BorderSizePixel = 0,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Accent" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Accent,
                })

                Objects.CircleOutline = Utility.New("Frame", {
                    Name = "CircleOutline",
                    Size = UDim2.new(0, 12, 0, 12),
                    Position = UDim2.new(1, -5, 0.5, -6),
                    BorderSizePixel = 0,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(1, 0),
                    Parent = Objects.CircleOutline,
                })

                ZIndex += 1

                Objects.Circle = Utility.New("Frame", {
                    Name = "Circle",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.CircleOutline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Accent" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(1, 0),
                    Parent = Objects.Circle,
                })
            end; Slider.ZIndex = ZIndex

            function Slider.Set(value)
                Slider.Value = math.clamp(Utility.Round(value, cfg.float), cfg.min, cfg.max)

                Objects.Value.Text = string.format(cfg.suffix, tostring(Slider.Value))

                Library.Tween(Objects.Accent, {
                    Size = UDim2.new((Slider.Value - cfg.min) / (cfg.max - cfg.min), 0, 1, 0)
                })
    
                Library.Tween(Objects.CircleOutline, {
                    Position = UDim2.new((Slider.Value - cfg.min) / (cfg.max - cfg.min), 0, 0.5, 0),
                    AnchorPoint = Vector2.new( (Slider.Value - cfg.min) / (cfg.max - cfg.min), 0.5)
                })

                Library.ChangeObjectTheme(Objects.Text, {
                    TextColor3 = value > cfg.min and "Text" or "Dark Text"
                }, true)

                Library.ChangeObjectTheme(Objects.Value, {
                    TextColor3 = value > cfg.min and "Text" or "Dark Text"
                }, true)

                cfg.callback(Slider.Value)

                Library.Flags[cfg.flag] = Slider.Value
            end

            Utility.Signal(Objects.Outline.MouseButton1Down:Connect(function(input)
                local MouseLocation = UserInputService:GetMouseLocation()

                Slider.Sliding = true

                Slider.Set( ((cfg.max - cfg.min) * ((MouseLocation.x - Objects.Outline.AbsolutePosition.x) / Objects.Outline.AbsoluteSize.x)) + cfg.min )
            end))

            Utility.Signal(UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Slider.Sliding then
                    Slider.Sliding = false
                end
            end))

            Utility.Signal(UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and Slider.Sliding then
                    Slider.Set( ((cfg.max - cfg.min) * ((input.Position.x - Objects.Outline.AbsolutePosition.x) / Objects.Outline.AbsoluteSize.x)) + cfg.min )
                end
            end))

            Slider.Set(cfg.value)

            Library.ConfigFlags[cfg.flag] = Slider.Set

            return setmetatable(Slider, Library)
        end

        function Library.Button(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Button",
                confirm = false,
                autosize = false,
                callback = function() end,
            })

            local Button = {
                Clicked = false,

                ZIndex = self.ZIndex,

                Time = 0,

                Objects = { },
            }

            local ZIndex = Button.ZIndex

            local Objects = Button.Objects; do
                Objects.Outline = Utility.New("TextButton", {
                    Name = "Outline",
                    Size = cfg.autosize and UDim2.new(0, 0, 0, 0) or UDim2.new(1, 0, 0, 0),
                    AutomaticSize = cfg.autosize and Enum.AutomaticSize.XY or Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    TextSize = 0,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline,
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingTop = UDim.new(0, 2),
                    PaddingBottom = UDim.new(0, 5), 
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    Size = cfg.autosize and UDim2.new(0, 0, 0, 0) or  UDim2.new(1, 0, 0, 0),
                    Text = cfg.name,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    BackgroundTransparency = 1,
                    TextStrokeTransparency = 0.8,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Objects.Text.Size = UDim2.new(cfg.autosize and 0 or 1, cfg.autosize and Objects.Text.TextBounds.X or 0, 0, Objects.Text.TextBounds.Y - 2)
            end; Button.ZIndex = ZIndex

            function Button.StartConfirmation()
                Button.Clicked = true

                Button.Time = 5

                Objects.Text.Text = string.format("Confirm %s? (%s)", cfg.name, Button.Time)

                Button.Coroutine = coroutine.create(function()
                    for i = 1, 5 do
                        task.wait(1)

                        Button.Time -= 1

                        if Button.Time > 0 then
                            Objects.Text.Text = string.format("Confirm %s? (%s)", cfg.name, Button.Time)
                        else
                            Objects.Text.Text = cfg.name
                            
                            if Button.Clicked then
                                Library.ChangeObjectTheme(Objects.Text, {
                                    TextColor3 = "Dark Text"
                                }, true)

                                Button.Clicked = false
                            end

                            break
                        end
                    end
                end); coroutine.resume(Button.Coroutine)
            end

            function Button.Click()
                if cfg.confirm then
                    if Button.Clicked then
                        Library.ChangeObjectTheme(Objects.Text, {
                            TextColor3 = "Dark Text"
                        }, true)
                        
                        coroutine.close(Button.Coroutine)

                        Objects.Text.Text = cfg.name

                        Button.Clicked = false

                        cfg.callback()
                    else
                        Library.ChangeObjectTheme(Objects.Text, {
                            TextColor3 = "Accent"
                        }, true)
                        
                        Button.StartConfirmation()
                    end
                else
                    cfg.callback()

                    Library.ChangeObjectTheme(Objects.Text, {
                        TextColor3 = "Accent"
                    }, true)

                    task.wait(Library.TweenSpeed)

                    Library.ChangeObjectTheme(Objects.Text, {
                        TextColor3 = "Dark Text"
                    }, true)
                end
            end

            Utility.Signal(Objects.Outline.MouseButton1Click:Connect(Button.Click))

            return setmetatable(Button, Library)
        end

        function Library.List(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New List",
                description = nil,
                value = "value1",
                values = { "value1", "value2", "value3", "value4", "value5", "value6" },
                multi = false,
                size = 100,
                callback = function() end,
                flag = nil,
            })

            if not cfg.flag then
                cfg.flag = cfg.name
            end

            local List = {
                ZIndex = self.ZIndex,

                Objects = { },

                Popup = { },

                Items = { },

                Value = nil,
            }

            local ZIndex = List.ZIndex

            local Objects = List.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Line = Utility.New("TextButton", {
                    Name = "Line",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Line,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Text = cfg.name,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Line,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.Text,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.SideHolder = Utility.New("Frame", {
                    Name = "SideHolder",
                    Size = UDim2.new(0, 0, 1, 0),
                    AutomaticSize = Enum.AutomaticSize.X,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.SideHolder,
                    Padding = UDim.new(0, 2),
                }) 

                List.SideHolder = Objects.SideHolder

                ZIndex += 1

                if cfg.description then
                    Objects.Description = Utility.New("TextLabel", {
                        Name = "Description",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize - 2,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.description,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Line,
                        ZIndex = ZIndex,
                        TextWrapped = true,
                    }, { TextColor3 = "Light Text" })

                    ZIndex += 1
                end

                Objects.Outline = Utility.New("TextButton", {
                    Name = "Outline",
                    Size = UDim2.new(1, 0, 0, cfg.size),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline,
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                    Parent = Objects.Background
                })

                ZIndex += 1

                Objects.Scrolling = Utility.New("ScrollingFrame", {
                    Name = "Scrolling",
                    Size = UDim2.new(1, 0, 1, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    BottomImage = Library.ScrollBar,
                    MidImage = Library.ScrollBar,
                    TopImage = Library.ScrollBar,
                    ScrollBarThickness = 2,
                }, { ScrollBarImageColor3 = "Accent" })

                ZIndex += 1

                Objects.Content = Utility.New("Frame", {
                    Name = "Content",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Scrolling,
                    ZIndex = ZIndex,
                })
                
                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Center,
                    Parent = Objects.Content,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

            end; List.ZIndex = ZIndex

            function List.Set(value)
                if cfg.multi then
                    if type(value) == "table" then -- probably means config/values is loading...
                        for _,item in List.Items do
                            item.Select(false)
                        end

                        for _,item in value do
                            for _,item2 in List.Items do
                                if item2.Name == item then
                                    item2.Select(true)
                                end
                            end
                        end

                        List.Value = value

                        cfg.callback(List.Value)

                        Library.Flags[cfg.flag] = List.Value
                    else
                        local Index = table.find(List.Value, value)

                        if Index then
                            table.remove(List.Value, Index)

                            for _,item in List.Items do
                                if item.Name == value then
                                    item.Select(false)
                                end
                            end

                            cfg.callback(List.Value)

                            Library.Flags[cfg.flag] = List.Value
                        else
                            table.insert(List.Value, value)

                            for _,item in List.Items do
                                if item.Name == value then
                                    item.Select(true)
                                end
                            end

                            cfg.callback(List.Value)

                            Library.Flags[cfg.flag] = List.Value
                        end
                    end
                else
                    for _,item in List.Items do
                        item.Select(item.Name == value)
                    end

                    List.Value = value

                    cfg.callback(List.Value)

                    Library.Flags[cfg.flag] = List.Value
                end
            end

            function List.Add(name)
                local Item = {
                    Objects = {},

                    Name = name,

                    Selected = false,
                }

                local Objs = Item.Objects; do
                    Objs.Text = Utility.New("TextButton", {
                        Name = "Text",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = name,
                        AutoButtonColor = false,
                        Style = Enum.ButtonStyle.Custom,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Content,
                        ZIndex = ZIndex,
                    }, { TextColor3 = "Dark Text" })
                end

                function Item.Select(value)
                    Library.ChangeObjectTheme(Objs.Text, {
                        TextColor3 = value and "Text" or "Dark Text",
                    }, true)

                    Item.Selected = value
                end

                Utility.Signal(Objs.Text.MouseButton1Click:Connect(function()
                    List.Set(name)
                end))

                table.insert(List.Items, Item)

                return Item
            end

            function List.Refresh(tbl)
                for _,item in List.Items do
                    item.Objects.Text:Destroy()
                end

                List.Items = { }

                List.Value = cfg.multi and { } or nil

                for _,item in tbl do
                    if type(item) == "string" then
                        List.Add(item)
                    end
                end
            end

            for _,item in cfg.values do
                List.Add(item)
            end

            List.Set(cfg.value)

            Library.ConfigFlags[cfg.flag] = List.Set

            return setmetatable(List, Library)
        end
        
        function Library.Dropdown(self, cfg)
            cfg = cfg or {}; cfg = Library.Config(cfg, {
                name = "New Dropdown",
                description = nil,
                values = { "value1", "value2", "value3", "value4", "value5" },
                value = "value1",
                multi = false,
                flag = nil,
                callback = function() end,
            })

            if not cfg.flag then
                cfg.flag = cfg.name
            end

            local Dropdown = {
                Tweening = false,

                Visible = false,

                ZIndex = self.ZIndex,

                Objects = { },

                Popup = { },

                Items = { },

                Value = nil,
            }

            local ZIndex = self.ZIndex

            local Objects = Dropdown.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Line = Utility.New("TextButton", {
                    Name = "Line",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Line,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Text = cfg.name,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Line,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.Text,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.SideHolder = Utility.New("Frame", {
                    Name = "SideHolder",
                    Size = UDim2.new(0, 0, 1, 0),
                    AutomaticSize = Enum.AutomaticSize.X,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.SideHolder,
                    Padding = UDim.new(0, 2),
                }) 

                Dropdown.SideHolder = Objects.SideHolder

                ZIndex += 1

                if cfg.description then
                    Objects.Description = Utility.New("TextLabel", {
                        Name = "Description",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize - 2,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.description,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Line,
                        ZIndex = ZIndex,
                        TextWrapped = true,
                    }, { TextColor3 = "Light Text" })

                    ZIndex += 1
                end

                Objects.Outline = Utility.New("TextButton", {
                    Name = "Outline",
                    Size = UDim2.new(1, 0, 0, 20),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline,
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 2),
                    PaddingBottom = UDim.new(0, 2),
                    Parent = Objects.Background
                })

                ZIndex += 1

                Objects.Value = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 1, -2),
                    Text = "Value",
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Text" })

                ZIndex += 1
            end; Dropdown.ZIndex = ZIndex

            local Popup = Dropdown.Popup; do
                Popup.Outline = Utility.New("Frame", {
                    Name = "Outline",
                    Size = UDim2.new(0, 0, 0, 0),
                    BorderSizePixel = 0,
                    Parent = Library.ScreenGui,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                    Visible = false,
                }, { BackgroundColor3 = "Inline" })

                if self.BoundObjects then
                    table.insert(self.BoundObjects, Popup.Outline)
                end

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Popup.Outline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Popup.Background = Utility.New("TextButton", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    BorderSizePixel = 0,
                    Parent = Popup.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Popup.Background,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    Parent = Popup.Background,
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                })

                ZIndex += 1

                Popup.Scroll = Utility.New("ScrollingFrame", {
                    Name = "Scroll",
                    Size = UDim2.new(1, 0, 1, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Popup.Background,
                    ZIndex = ZIndex,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    BottomImage = Library.ScrollBar,
                    MidImage = Library.ScrollBar,
                    TopImage = Library.ScrollBar,
                    ScrollBarThickness = 2,
                }, { ScrollBarImageColor3 = "Accent" })

                Popup.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Parent = Popup.Scroll,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Popup.Holder,
                    Padding = UDim.new(0, 5),
                })

            end; Popup.ZIndex = ZIndex

            -- Change Pos
                Utility.Signal(Objects.Outline:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
                    if Dropdown.Visible then
                        local Size = Objects.Outline.AbsoluteSize

                        local Position = Objects.Outline.AbsolutePosition

                        Popup.Outline.Position = UDim2.new(0, Position.X, 0, Position.Y + Size.Y + 5)
                    end
                end))

                Utility.Signal(UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and Dropdown.Visible then
                        if not Utility.MouseOver(Popup.Outline, input) then
                            -- Close dropdown safely
                            if Dropdown and type(Dropdown) == "table" then
                                if Dropdown.Open and type(Dropdown.Open) == "function" then
                                    Dropdown.Open()
                                end
                            end
                        end
                    end
                end))
            --

            function Dropdown.Display()
                local Value = Dropdown.Value
                
                if cfg.multi then
                    local CurrentText = {}

                    if Value and #Value > 0 then
                        for _,item in Value do
                            if type(item) == "string" then
                                table.insert(CurrentText, item)
                            end
                        end
                        
                        if #CurrentText > 0 then
                            Objects.Value.Text = table.concat(CurrentText, ", ")
                        else
                            Objects.Value.Text = "-"
                        end
                    else
                        Objects.Value.Text = "-"
                    end
                else
                    if type(Value) == "string" then
                        Objects.Value.Text = Value ~= "" and Value or "-" 
                    else
                        Objects.Value.Text = "-"
                    end
                end
            end

            function Dropdown.Size()
                local Size = 0

                local Count = 0

                for _,v in Popup.Holder:GetChildren() do
                    Count += 1

                    if v:IsA("TextButton") then
                        Size += v.AbsoluteSize.y + 5
                    end

                    if Count > 4 then
                        break
                    end
                end

                Size += 10

                return Size
            end

            function Dropdown.Open()
                if Dropdown.Tweening then
                    return
                end

                Dropdown.Tweening = true

                Dropdown.Visible = not Dropdown.Visible

                if Dropdown.Visible then
                    Popup.Outline.Visible = true
                end

                local ParentObjects = Popup.Outline:GetDescendants()

                table.insert(ParentObjects, Popup.Outline)

                for _, obj in ParentObjects do
                    local Index = Utility.GetTransparency(obj)
                    if not Index then continue end

                    if type(Index) == "table" then
                        for _, prop in Index do
                            Library.Fade(obj, prop, Dropdown.Visible)
                        end
                    else
                        Library.Fade(obj, Index, Dropdown.Visible)
                    end
                end

                local Size = Objects.Outline.AbsoluteSize

                local Position = Objects.Outline.AbsolutePosition

                Popup.Outline.Position = UDim2.new(0, Position.X, 0, Position.Y + Size.Y + 5)

                Popup.Outline.Size = Dropdown.Visible and UDim2.new(0, Size.X, 0, 20) or UDim2.new(0, Size.X, 0, Dropdown.Size())

                local Tween = Library.Tween(Popup.Outline, {
                    Size = Dropdown.Visible and UDim2.new(0, Size.X, 0, Dropdown.Size()) or UDim2.new(0, Size.X, 0, 20),
                })

                Utility.Signal(Tween.Completed:Connect(function()
                    Popup.Outline.Visible = Dropdown.Visible

                    Dropdown.Tweening = false
                end))
            end

            function Dropdown.Set(value, ignore)
                if cfg.multi then
                    if type(value) == "table" then -- probably means config/values is loading...
                        for _,item in Dropdown.Items do
                            item.Select(false)
                        end

                        for _,item in value do
                            for _,item2 in Dropdown.Items do
                                if item2.Name == item then
                                    item2.Select(true)
                                end
                            end
                        end

                        Dropdown.Value = value

                        Dropdown.Display()

                        if not ignore then
                            cfg.callback(Dropdown.Value)
                        end

                        Library.Flags[cfg.flag] = Dropdown.Value
                    else
                        local Index = table.find(Dropdown.Value, value)

                        if Index then
                            table.remove(Dropdown.Value, Index)

                            for _,item in Dropdown.Items do
                                if item.Name == value then
                                    item.Select(false)
                                end
                            end

                            Dropdown.Display()

                            if not ignore then
                                cfg.callback(Dropdown.Value)
                            end

                            Library.Flags[cfg.flag] = Dropdown.Value
                        else
                            table.insert(Dropdown.Value, value)

                            for _,item in Dropdown.Items do
                                if item.Name == value then
                                    item.Select(true)
                                end
                            end

                            Dropdown.Display()

                            if not ignore then
                                cfg.callback(Dropdown.Value)
                            end

                            Library.Flags[cfg.flag] = Dropdown.Value
                        end
                    end
                else
                                    for _,item in Dropdown.Items do
                    item.Select(item.Name == value)
                end

                Dropdown.Value = type(value) == "string" and value or nil

                Dropdown.Display()

                if not ignore then
                    cfg.callback(Dropdown.Value)
                end

                Library.Flags[cfg.flag] = Dropdown.Value
                end
            end

            function Dropdown.Add(name)
                if type(name) ~= "string" then
                    return
                end
                
                local Item = {
                    Objects = {},

                    Name = name,

                    Selected = false,
                }

                local Objects = Item.Objects; do
                    Objects.Text = Utility.New("TextButton", {
                        Name = "Text",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = name,
                        AutoButtonColor = false,
                        Style = Enum.ButtonStyle.Custom,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Popup.Holder,
                        ZIndex = ZIndex,
                    }, { TextColor3 = "Dark Text" })
                end

                function Item.Select(value)
                    Library.ChangeObjectTheme(Objects.Text, {
                        TextColor3 = value and "Text" or "Dark Text",
                    }, true)

                    Item.Selected = value
                end

                Utility.Signal(Objects.Text.MouseButton1Click:Connect(function()
                    Dropdown.Set(name)
                end))

                table.insert(Dropdown.Items, Item)

                return Item
            end

            function Dropdown.Refresh(tbl)
                for _,item in Dropdown.Items do
                    item.Objects.Text:Destroy()
                end

                Dropdown.Items = { }

                Dropdown.Value = cfg.multi and { } or nil
                
                for _,item in tbl do
                    if type(item) == "string" then
                        Dropdown.Add(item)
                    end
                end

                Dropdown.Display()
            end

            for _,item in cfg.values do
                Dropdown.Add(item)
            end

            Dropdown.Set(cfg.value)

            Utility.Signal(Objects.Outline.MouseButton1Click:Connect(Dropdown.Open))

            Library.ConfigFlags[cfg.flag] = Dropdown.Set

            table.insert(Library.Dropdowns, Dropdown)

            return setmetatable(Dropdown, Library)
        end

        function Library.Colorpicker(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Colorpicker",
                value = Color3.new(1, 1, 1),
                alpha = 0,
                flag = nil,
                callback = function() end,
            })

            local Colorpicker = {
                Tweening = false,

                ZIndex = self.ZIndex,

                Objects = { },

                Popup = { },

                Value = cfg.value,
                
                Alpha = cfg.alpha,
            }

            local ZIndex = Colorpicker.ZIndex

            local Objects = Colorpicker.Objects; do
                if not self.SideHolder then
                    Objects.Holder = Utility.New("Frame", {
                        Name = "Holder",
                        Size = UDim2.new(1, 0, 0, 0),
                        Position = UDim2.fromOffset(0, 0),
                        BackgroundTransparency = 1,
                        AutomaticSize = Enum.AutomaticSize.Y,
                        BorderSizePixel = 0,
                        Parent = self.Holder,
                        ZIndex = ZIndex,
                    })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Vertical,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Parent = Objects.Holder,
                        Padding = UDim.new(0, 5),
                    })
        
                    ZIndex += 1
        
                    Objects.Line = Utility.New("TextButton", {
                        Name = "Line",
                        Size = UDim2.new(1, 0, 0, 0),
                        Position = UDim2.fromOffset(0, 0),
                        BackgroundTransparency = 1,
                        AutoButtonColor = false,
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Style = Enum.ButtonStyle.Custom,
                        Text = "",
                        Parent = Objects.Holder,
                        ZIndex = ZIndex,
                    })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Vertical,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Parent = Objects.Line,
                        Padding = UDim.new(0, 2),
                    })
                    
                    ZIndex += 1

                    Objects.Text = Utility.New("TextLabel", {
                        Name = "Text",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.name,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Line,
                        ZIndex = ZIndex,
                    }, { TextColor3 = "Dark Text" })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Horizontal,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        HorizontalAlignment = Enum.HorizontalAlignment.Right,
                        Parent = Objects.Text,
                        Padding = UDim.new(0, 2),
                    })
        
                    ZIndex += 1
        
                    Objects.SideHolder = Utility.New("Frame", {
                        Name = "SideHolder",
                        Size = UDim2.new(0, 0, 1, 0),
                        AutomaticSize = Enum.AutomaticSize.X,
                        Position = UDim2.fromOffset(0, 0),
                        BackgroundTransparency = 1,
                        BorderSizePixel = 0,
                        Parent = Objects.Text,
                        ZIndex = ZIndex,
                    })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Horizontal,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        HorizontalAlignment = Enum.HorizontalAlignment.Right,
                        Parent = Objects.SideHolder,
                        Padding = UDim.new(0, 2),
                    }) 
        
                    Colorpicker.SideHolder = Objects.SideHolder
        
                    ZIndex += 1
                end

                local Parent = self.SideHolder or Objects.Text

                Objects.Outline = Utility.New("TextButton", {
                    Name = "Outline",
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    BackgroundTransparency = 0,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Parent = Parent,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Objects.Outline.Size = UDim2.new(0, Parent.AbsoluteSize.Y, 0, Parent.AbsoluteSize.Y)

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    BackgroundTransparency = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background
                })

                ZIndex += 1
                
            end; Colorpicker.ZIndex = ZIndex

            local ColorpickerWindow = Library.ColorpickerWindow

            function Colorpicker.Set(value, alpha)
                local Color, Alpha;

                if type(value) == "table" then
                    Color = value.c
                    Alpha = value.a
                else
                    Color = value
                    Alpha = alpha or Colorpicker.Alpha
                end

                Colorpicker.Value = Color

                if Alpha then
                    Colorpicker.Alpha = Alpha
                    
                    Objects.Background.BackgroundTransparency = Alpha
                end

                Objects.Background.BackgroundColor3 = Color

                Library.Flags[cfg.flag] = {
                    c = Color,
                    a = Alpha
                }

                cfg.callback({
                    c = Color,
                    a = Alpha
                })
            end
            
            Utility.Signal(Objects.Outline.MouseButton1Click:Connect(function(input)
                ColorpickerWindow.Flag = cfg.flag

                ColorpickerWindow.SetFunc = Colorpicker.Set

                ColorpickerWindow.Set(Colorpicker.Value, Colorpicker.Alpha)
                
                ColorpickerWindow.Open( Objects.Outline.AbsolutePosition + Vector2.new(0, Objects.Outline.AbsoluteSize.Y + 2) )
            end))

            Utility.Signal(UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and ColorpickerWindow.Visible and ColorpickerWindow.Flag == cfg.flag and not (Utility.MouseOver(ColorpickerWindow.Objects.Outline, input) or Utility.MouseOver(Objects.Outline, input)) then
                    ColorpickerWindow.Open( Objects.Outline.AbsolutePosition + Vector2.new(0, Objects.Outline.AbsoluteSize.Y + 2) )
                end
            end))
            
            Utility.Signal(Objects.Outline:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
                if ColorpickerWindow.Visible and ColorpickerWindow.Flag == cfg.flag then
                    local Position = Objects.Outline.AbsolutePosition + Vector2.new(0, Objects.Outline.AbsoluteSize.Y + 2)

                    ColorpickerWindow.Objects.Outline.Position = UDim2.new(0, Position.x, 0, Position.y)
                end
            end))

            Colorpicker.Set(cfg.value, cfg.alpha)

            Library.ConfigFlags[cfg.flag] = Colorpicker.Set

            return setmetatable(Colorpicker, Library)
        end
        
        function Library.Textbox(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Textbox",
                value = "",
                callback = function() end,
                flag = nil,
            })

            if not cfg.flag then
                cfg.flag = cfg.name
            end

            local Textbox = {
                ZIndex = self.ZIndex,

                Objects = { },
            }

            local ZIndex = Textbox.ZIndex

            local Objects = Textbox.Objects; do
                Objects.Outline = Utility.New("TextButton", {
                    Name = "Outline",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    TextSize = 0,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline,
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingTop = UDim.new(0, 2),
                    PaddingBottom = UDim.new(0, 5), 
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                ZIndex += 1

                Objects.TextBox = Utility.New("TextBox", {
                    Name = "TextBox",
                    Size = UDim2.new(1, 0, 0, 0),
                    Text = cfg.value,
                    ClearTextOnFocus = false,
                    PlaceholderText = cfg.name,
                    ClipsDescendants = true,
                    MultiLine = false,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    BackgroundTransparency = 1,
                    TextStrokeTransparency = 0.8,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Text", PlaceholderColor3 = "Dark Text" })

                Objects.TextBox.Size = UDim2.new(1, 0, 0, Objects.TextBox.TextBounds.Y - 2)
            end; Textbox.ZIndex = ZIndex

            function Textbox.Set(value)
                Objects.TextBox.Text = value

                Library.Flags[cfg.flag] = value
                cfg.callback(value)
            end

            Utility.Signal(Objects.TextBox.FocusLost:Connect(function()
                Textbox.Set(Objects.TextBox.Text)
            end))

            Textbox.Set(cfg.value)

            Library.ConfigFlags[cfg.flag] = Textbox.Set

            return setmetatable(Textbox, Library)
        end

        function Library.Keybind(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Keybind",
                key = Enum.KeyCode.Unknown,
                callback = function() end,
                flag = nil,
            })

            if not cfg.flag then
                cfg.flag = cfg.name
            end
            
            local Keybind = {
                Tweening = false,

                Visible = false,

                ZIndex = self.ZIndex,

                Objects = { },

                Popup = { },

                Key = nil,

                Listener = nil,
            }

            local ZIndex = Keybind.ZIndex

            local Objects = Keybind.Objects; do
                if not self.SideHolder then
                    Objects.Holder = Utility.New("Frame", {
                        Name = "Holder",
                        Size = UDim2.new(1, 0, 0, 0),
                        Position = UDim2.fromOffset(0, 0),
                        BackgroundTransparency = 1,
                        AutomaticSize = Enum.AutomaticSize.Y,
                        BorderSizePixel = 0,
                        Parent = self.Holder,
                        ZIndex = ZIndex,
                    })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Vertical,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Parent = Objects.Holder,
                        Padding = UDim.new(0, 5),
                    })
        
                    ZIndex += 1
        
                    Objects.Line = Utility.New("TextButton", {
                        Name = "Line",
                        Size = UDim2.new(1, 0, 0, 0),
                        Position = UDim2.fromOffset(0, 0),
                        BackgroundTransparency = 1,
                        AutoButtonColor = false,
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Style = Enum.ButtonStyle.Custom,
                        Text = "",
                        Parent = Objects.Holder,
                        ZIndex = ZIndex,
                    })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Vertical,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Parent = Objects.Line,
                        Padding = UDim.new(0, 2),
                    })
                    
                    ZIndex += 1

                    Objects.Text = Utility.New("TextLabel", {
                        Name = "Text",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.name,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Line,
                        ZIndex = ZIndex,
                    }, { TextColor3 = "Dark Text" })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Horizontal,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        HorizontalAlignment = Enum.HorizontalAlignment.Right,
                        Parent = Objects.Text,
                        Padding = UDim.new(0, 2),
                    })
        
                    ZIndex += 1
        
                    Objects.SideHolder = Utility.New("Frame", {
                        Name = "SideHolder",
                        Size = UDim2.new(0, 0, 1, 0),
                        AutomaticSize = Enum.AutomaticSize.X,
                        Position = UDim2.fromOffset(0, 0),
                        BackgroundTransparency = 1,
                        BorderSizePixel = 0,
                        Parent = Objects.Text,
                        ZIndex = ZIndex,
                    })
        
                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Horizontal,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        HorizontalAlignment = Enum.HorizontalAlignment.Right,
                        Parent = Objects.SideHolder,
                        Padding = UDim.new(0, 2),
                    }) 
        
                    Keybind.SideHolder = Objects.SideHolder
        
                    ZIndex += 1
                end

                local Parent = self.SideHolder or Objects.Text

                Objects.Icon = Utility.New("ImageButton", {
                    Name = "Icon",
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Image = "rbxassetid://81471583706380",
                    Parent = Parent,
                    ZIndex = ZIndex,
                    ScaleType = Enum.ScaleType.Crop,
                }, { ImageColor3 = "Text" })

                Objects.Icon.Size = UDim2.new(0, Parent.AbsoluteSize.Y, 0, Parent.AbsoluteSize.Y)
            end; Keybind.ZIndex = ZIndex

            local Popup = Keybind.Popup; do
                Popup.Outline = Utility.New("Frame", {
                    Name = "Outline",
                    Size = UDim2.new(0, 150, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = Library.ScreenGui,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                    Visible = false,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Popup.Outline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Popup.Background = Utility.New("TextButton", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    BorderSizePixel = 0,
                    Parent = Popup.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Popup.Background,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    Parent = Popup.Background,
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                })

                ZIndex += 1

                Popup.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Parent = Popup.Background,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Popup.Holder,
                    Padding = UDim.new(0, 5),
                })

                Popup.Line = Utility.New("TextButton", {
                    Name = "Line",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Popup.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Popup.Line,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Popup.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Text = "Key",
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Popup.Line,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Popup.Text,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Popup.KeyOutline = Utility.New("TextButton", {
                    Name = "Outline",
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    BackgroundTransparency = 0,
                    Parent = Popup.Text,
                    Text = "",
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Popup.KeyOutline.Size = UDim2.new(0, 25, 0, Popup.Text.AbsoluteSize.Y)

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Popup.KeyOutline
                })

                ZIndex += 1

                Popup.KeyBackground = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Popup.KeyOutline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Popup.KeyBackground
                })  

                ZIndex += 1

                Popup.Key = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize - 2,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 1, -2),
                    Text = "E",
                    Parent = Popup.KeyBackground,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })
            end; Keybind.ZIndex = ZIndex

            function Keybind.Set(value, ignore)
                local Type = typeof(value)
                if Type == "EnumItem" then
                    Keybind.Key = value 

                    value = ( value == Enum.KeyCode.Unknown and "None" or value.Name )

                    Popup.Key.Text = Library.KeyConverters[ value:lower() ] or value
                    
                    Library.Tween(Popup.KeyOutline, {
                        Size = UDim2.new(0, Popup.Key.TextBounds.X + 10, 0, Popup.Text.AbsoluteSize.Y)
                    })
                end 

                if not ignore then
                    Library.Flags[cfg.flag] = Keybind.Key
                end

                Library.Flags[string.format("%s_data", cfg.flag)] = {
                    key = Keybind.Key
                }
            end



            function Keybind.Open()
                if Keybind.Tweening then
                    return
                end

                Keybind.Tweening = true

                Keybind.Visible = not Keybind.Visible

                if Keybind.Visible then
                    Popup.Outline.Visible = true
                end

                local ParentObjects = Popup.Outline:GetDescendants()

                table.insert(ParentObjects, Popup.Outline)

                for _, obj in ParentObjects do
                    local Index = Utility.GetTransparency(obj)
                    if not Index then continue end

                    if type(Index) == "table" then
                        for _, prop in Index do
                            Library.Fade(obj, prop, Keybind.Visible)
                        end
                    else
                        Library.Fade(obj, Index, Keybind.Visible)
                    end
                end

                local OldSize = Popup.Outline.AbsoluteSize
                local Position = Objects.Icon.AbsolutePosition + Vector2.new(0, Objects.Icon.AbsoluteSize.y + 5)

                Popup.Outline.AutomaticSize = Enum.AutomaticSize.None

                Popup.Outline.Size = Keybind.Visible and UDim2.new(0, OldSize.x, 0, 0) or UDim2.new(0, OldSize.x, 0, OldSize.Y)
                Popup.Outline.Position = UDim2.new(0, Position.X, 0, Position.Y)

                local Tween = Library.Tween(Popup.Outline, {
                    Size = Keybind.Visible and UDim2.new(0, OldSize.x, 0, OldSize.Y) or UDim2.new(0, OldSize.x, 0, 0),
                })

                Utility.Signal(Tween.Completed:Connect(function()
                    Keybind.Tweening = false

                    Popup.Outline.Size = UDim2.new(0, OldSize.x, 0, 0)

                    Popup.Outline.AutomaticSize = Enum.AutomaticSize.Y

                    Popup.Outline.Visible = Keybind.Visible
                end))
            end

            Utility.Signal(Popup.KeyOutline.MouseButton1Click:Connect(function(input) 
                if Keybind.Listener then 
                    Library.ChangeObjectTheme(Popup.Key, {
                        TextColor3 = "Dark Text",
                    }, true)

                    Keybind.Listener:Disconnect( )
                    Keybind.Listener = nil 

                    return
                end
                
                Library.ChangeObjectTheme(Popup.Key, {
                    TextColor3 = "Accent",
                }, true)
                
                task.wait( 1/50 )

                Keybind.Listener = Utility.Signal(UserInputService.InputBegan:Connect(function(input) 
                    if input.KeyCode == Enum.KeyCode.Escape or input.KeyCode == Enum.KeyCode.Backspace then 
                        Keybind.Set( Enum.KeyCode.Unknown )

                        Keybind.Listener:Disconnect( )
                        Keybind.Listener = nil
                            
                        Library.ChangeObjectTheme(Popup.Key, {
                            TextColor3 = "Dark Text",
                        }, true)

                        return
                    end

                    if input.UserInputType == Enum.UserInputType.Keyboard or table.find({ Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3 }, input.UserInputType ) then 
                        local Key = input.KeyCode ~= Enum.KeyCode.Unknown and input.KeyCode or input.UserInputType or Enum.KeyCode.Unknown
                        
                        Keybind.Set( Key )

                        Library.ChangeObjectTheme(Popup.Key, {
                            TextColor3 = "Dark Text",
                        }, true)

                        Keybind.Listener:Disconnect( )
                        Keybind.Listener = nil
                    end
                end))
            end))

            Utility.Signal(UserInputService.InputBegan:Connect(function(input) 
                -- Не обрабатываем нажатия, если кейбинд установлен на Unknown
                if Keybind.Key ~= Enum.KeyCode.Unknown and (input.KeyCode == Keybind.Key or input.UserInputType == Keybind.Key) then 
                    -- Проверяем, не находится ли фокус на текстовом поле
                    local UserInputService = game:GetService("UserInputService")
                    if UserInputService:GetFocusedTextBox() then
                        return
                    end
                    
                    -- Дополнительная проверка на TextBox
                    local GuiObjectsAtPosition = game:GetService("CoreGui"):GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)
                    for _, obj in ipairs(GuiObjectsAtPosition) do
                        if obj:IsA("TextBox") and obj:IsDescendantOf(game:GetService("CoreGui")) then
                            return -- Игнорируем нажатие, если курсор находится над TextBox
                        end
                    end
                    
                    -- Простой вызов callback при нажатии клавиши
                    cfg.callback()
                end
            end))

            Utility.Signal(UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Keybind.Visible and not (Utility.MouseOver(Popup.Outline, input) or Utility.MouseOver(Objects.Icon, input)) then
                    Keybind.Open()
                end
            end))

            Utility.Signal(Objects.Icon.MouseButton1Click:Connect(function()
                Keybind.Open()
            end))

            Keybind.Set(cfg.key, true)

            -- Library.ConfigFlags[cfg.flag] = Keybind.Set
            Library.ConfigFlags[string.format("%s_data", cfg.flag)] = Keybind.Set

            return setmetatable(Keybind, Library)
        end

        function Library.List(self, cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New List",
                description = nil,
                value = "value1",
                values = { "value1", "value2", "value3", "value4", "value5", "value6" },
                multi = false,
                size = 100,
                callback = function() end,
                flag = nil,
            })

            if not cfg.flag then
                cfg.flag = cfg.name
            end

            local List = {
                ZIndex = self.ZIndex,

                Objects = { },

                Popup = { },

                Items = { },

                Value = nil,
            }

            local ZIndex = List.ZIndex

            local Objects = List.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Line = Utility.New("TextButton", {
                    Name = "Line",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutoButtonColor = false,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Line,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Text = cfg.name,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Line,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Dark Text" })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.Text,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.SideHolder = Utility.New("Frame", {
                    Name = "SideHolder",
                    Size = UDim2.new(0, 0, 1, 0),
                    AutomaticSize = Enum.AutomaticSize.X,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.SideHolder,
                    Padding = UDim.new(0, 2),
                }) 

                List.SideHolder = Objects.SideHolder

                ZIndex += 1

                if cfg.description then
                    Objects.Description = Utility.New("TextLabel", {
                        Name = "Description",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize - 2,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = cfg.description,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Line,
                        ZIndex = ZIndex,
                        TextWrapped = true,
                    }, { TextColor3 = "Light Text" })

                    ZIndex += 1
                end

                Objects.Outline = Utility.New("TextButton", {
                    Name = "Outline",
                    Size = UDim2.new(1, 0, 0, cfg.size),
                    Position = UDim2.fromOffset(0, 0),
                    BorderSizePixel = 0,
                    AutoButtonColor = false,
                    Style = Enum.ButtonStyle.Custom,
                    Text = "",
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline,
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    BorderSizePixel = 0,
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                    ClipsDescendants = true,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background,
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                    Parent = Objects.Background
                })

                ZIndex += 1

                Objects.Scrolling = Utility.New("ScrollingFrame", {
                    Name = "Scrolling",
                    Size = UDim2.new(1, 0, 1, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    BottomImage = Library.ScrollBar,
                    MidImage = Library.ScrollBar,
                    TopImage = Library.ScrollBar,
                    ScrollBarThickness = 2,
                }, { ScrollBarImageColor3 = "Accent" })

                ZIndex += 1

                Objects.Content = Utility.New("Frame", {
                    Name = "Content",
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Scrolling,
                    ZIndex = ZIndex,
                })
                
                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Center,
                    Parent = Objects.Content,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

            end; List.ZIndex = ZIndex

            function List.Set(value)
                if cfg.multi then
                    if type(value) == "table" then -- probably means config/values is loading...
                        for _,item in List.Items do
                            item.Select(false)
                        end

                        for _,item in value do
                            for _,item2 in List.Items do
                                if item2.Name == item then
                                    item2.Select(true)
                                end
                            end
                        end

                        List.Value = value

                        cfg.callback(List.Value)

                        Library.Flags[cfg.flag] = List.Value
                    else
                        local Index = table.find(List.Value, value)

                        if Index then
                            table.remove(List.Value, Index)

                            for _,item in List.Items do
                                if item.Name == value then
                                    item.Select(false)
                                end
                            end

                            cfg.callback(List.Value)

                            Library.Flags[cfg.flag] = List.Value
                        else
                            table.insert(List.Value, value)

                            for _,item in List.Items do
                                if item.Name == value then
                                    item.Select(true)
                                end
                            end

                            cfg.callback(List.Value)

                            Library.Flags[cfg.flag] = List.Value
                        end
                    end
                else
                    for _,item in List.Items do
                        item.Select(item.Name == value)
                    end

                    List.Value = value

                    cfg.callback(List.Value)

                    Library.Flags[cfg.flag] = List.Value
                end
            end

            function List.Add(name)
                local Item = {
                    Objects = {},

                    Name = name,

                    Selected = false,
                }

                local Objs = Item.Objects; do
                    Objs.Text = Utility.New("TextButton", {
                        Name = "Text",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize,
                        FontFace = Library.Font,
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        Text = name,
                        AutoButtonColor = false,
                        Style = Enum.ButtonStyle.Custom,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Content,
                        ZIndex = ZIndex,
                    }, { TextColor3 = "Dark Text" })
                end

                function Item.Select(value)
                    Library.ChangeObjectTheme(Objs.Text, {
                        TextColor3 = value and "Text" or "Dark Text",
                    }, true)

                    Item.Selected = value
                end

                Utility.Signal(Objs.Text.MouseButton1Click:Connect(function()
                    List.Set(name)
                end))

                table.insert(List.Items, Item)

                return Item
            end

            function List.Refresh(tbl)
                for _,item in List.Items do
                    item.Objects.Text:Destroy()
                end

                List.Items = { }

                List.Value = cfg.multi and { } or nil

                for _,item in tbl do
                    List.Add(item)
                end
            end

            for _,item in cfg.values do
                List.Add(item)
            end

            List.Set(cfg.value)

            Library.ConfigFlags[cfg.flag] = List.Set

            return setmetatable(List, Library)
        end

        function Library.Label(self, cfg)
            cfg = cfg or {}; cfg = Library.Config(cfg, {
                name = "New Label",
                bold = true,
                dark = false,
            })

            local Label = {
                Objects = { },

                ZIndex = self.ZIndex
            }

            local ZIndex = Label.ZIndex

            local Objects = Label.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    AutomaticSize = Enum.AutomaticSize.Y,
                    BorderSizePixel = 0,
                    Parent = self.Holder,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = cfg.bold and Library.FontSize or Library.FontSize - 2,
                    FontFace = Library.Font,
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    Text = cfg.name,
                    TextWrapped = true,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                }, { TextColor3 = cfg.dark and "Light Text" or "Text" })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.Text,
                    Padding = UDim.new(0, 2),
                })

                ZIndex += 1

                Objects.SideHolder = Utility.New("Frame", {
                    Name = "SideHolder",
                    Size = UDim2.new(0, 0, 1, 0),
                    AutomaticSize = Enum.AutomaticSize.X,
                    Position = UDim2.fromOffset(0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Parent = Objects.Text,
                    ZIndex = ZIndex,
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Parent = Objects.SideHolder,
                    Padding = UDim.new(0, 2),
                }) 

                Label.SideHolder = Objects.SideHolder

                ZIndex += 1            
            end; Label.ZIndex = ZIndex

            return setmetatable(Label, Library)
        end

        function Library.Notification(cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                name = "New Notification",
                description = nil,
                type = "Normal",
                buttons = nil,
                showbuttons = false,
                time = 5,
            })

            local ZIndex = 100

            local Notification = {
                Objects = {},

                Name = cfg.name,

                Description = cfg.description,

                Type = cfg.type,

                Time = cfg.time,

                Clock = os.clock(),

                Buttons = { },

                ShowButtons = cfg.showbuttons,

                ButtonLerp = 1,

                Lerp = 1,
            }

            local Objects = Notification.Objects; do
                Objects.Holder = Utility.New("Frame", {
                    Name = "Holder",
                    BorderSizePixel = 0,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.XY,
                    ZIndex = ZIndex,
                    Parent = Library.ScreenGui,
                })
                
                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Holder,
                    Padding = UDim.new(0, 5),   
                })

                ZIndex += 1

                Objects.Outline = Utility.New("Frame", {
                    Name = "Outline",
                    BorderSizePixel = 0,
                    Size = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.XY,
                    Position = UDim2.new(0, 0, 1, 0),
                    Parent = Objects.Holder,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Outline,
                    CornerRadius = UDim.new(0, 5),
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.fromOffset(1, 1),
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 6),
                    Parent = Objects.Background
                })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    Parent = Objects.Background,
                    CornerRadius = UDim.new(0, 5),
                })

                Utility.New("UIListLayout", {
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Vertical,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = Objects.Background,
                    Padding = UDim.new(0, 5),   
                })

                ZIndex += 1

                Objects.Title = Utility.New("TextLabel", {
                    Name = "Title",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    FontFace = Library.Font,
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.XY,
                    Text = cfg.name,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Text" })

                ZIndex += 1

                if cfg.buttons then
                    Objects.FadeHolder = Utility.New("Frame", {
                        Name = "ButtonHolder",
                        BorderSizePixel = 0,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.XY,
                        Parent = Objects.Holder,
                    })

                    Objects.ButtonHolder = Utility.New("Frame", {
                        Name = "ButtonHolder",
                        BorderSizePixel = 0,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.XY,
                        Parent = Objects.FadeHolder,
                    })

                    Utility.New("UIListLayout", {
                        Name = "UIListLayout",
                        FillDirection = Enum.FillDirection.Horizontal,
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Parent = Objects.ButtonHolder,
                        Padding = UDim.new(0, 2),                 
                    })

                    ZIndex += 1
                end
                
                if cfg.description then
                    Objects.Description = Utility.New("TextLabel", {
                        Name = "Description",
                        TextStrokeTransparency = 0.8,
                        BackgroundTransparency = 1,
                        TextSize = Library.FontSize - 2,
                        FontFace = Library.Font,
                        Size = UDim2.new(0, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.XY,
                        Text = cfg.description,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = Objects.Background,
                        ZIndex = ZIndex,
                        TextWrapped = true,
                    }, { TextColor3 = "Light Text" })

                    ZIndex += 1
                end

                if cfg.type == "Time" then
                    Objects.Time = Utility.New("Frame", {
                        Name = "Time",
                        BorderSizePixel = 0,
                        Size = UDim2.new(0, 0, 0, 2),
                        Position = UDim2.new(0, 0, 1, -2),
                        Parent = Objects.Background,
                        ZIndex = ZIndex,
                    }, { BackgroundColor3 = "Accent" })

                    Objects.Time.Size = UDim2.new(0, 0, 0, 2)
                end
            end
        
            function Notification.SetTime(time)
                Notification.Time = time
                Notification.Clock = os.clock()
            end

            function Notification.Hide()
                Notification.Time = 0
            end

            function Notification.Title(text)
                Objects.Title.Text = text
            end

            function Notification.Description(text)
                Objects.Description.Text = text
            end

            function Notification.ButtonVisiblity(visibility)
                Notification.ShowButtons = visibility
            end
            
            function Notification.CreateButton(bcfg)
                bcfg = bcfg or { }; bcfg = Library.Config(bcfg, {
                    text = "undefined",
                    callback = function() end,
                })
                
                local Button = Library.Button({
                    ZIndex = ZIndex,
                    Holder = Objects.ButtonHolder
                }, { AutoSize = true, Name = bcfg.text, Callback = bcfg.callback })

                table.insert(Notification.Buttons, Button)

                return Button
            end

            if cfg.buttons then
                for _,button in cfg.buttons do
                    Notification.CreateButton(button)
                end
            end

            table.insert(Library.Notifications, Notification)

            return Notification
        end

        function Library.Watermark(cfg)
            cfg = cfg or { }; cfg = Library.Config(cfg, {
                text = "Lumora | {game} | {time} | {date}",
                visible = true,
                rate = 1 / 60,
            })

            local ZIndex = 100

            local Watermark = {
                Objects = {},

                Visible = cfg.visible,

                Rate = cfg.rate,

                Text = cfg.text,

                ZIndex = ZIndex,
                
                Clock = os.clock(),
            }

            local Objects = Watermark.Objects; do
                Objects.Outline = Utility.New("Frame", {
                    Name = "Watermark",
                    BorderSizePixel = 0,
                    Size = UDim2.new(0, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.XY,
                    Position = UDim2.new(0, 10, 0, 0),
                    Parent = Library.ScreenGui,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Inline" })
                
                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Outline
                })

                ZIndex += 1

                Objects.Background = Utility.New("Frame", {
                    Name = "Background",
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -2, 1, -2),
                    Position = UDim2.new(0, 1, 0, 1),
                    Parent = Objects.Outline,
                    ZIndex = ZIndex,
                }, { BackgroundColor3 = "Background" })

                Utility.New("UICorner", {
                    Name = "UICorner",
                    CornerRadius = UDim.new(0, 5),
                    Parent = Objects.Background
                })

                Utility.New("UIPadding", {
                    Name = "UIPadding",
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 7),
                    Parent = Objects.Background
                })

                ZIndex += 1

                Objects.Text = Utility.New("TextLabel", {
                    Name = "Text",
                    TextStrokeTransparency = 0.8,
                    BackgroundTransparency = 1,
                    TextSize = Library.FontSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    AutomaticSize = Enum.AutomaticSize.X,
                    FontFace = Library.Font,
                    Size = UDim2.new(0, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Text = Watermark.Text,
                    Parent = Objects.Background,
                    ZIndex = ZIndex,
                }, { TextColor3 = "Text" })
            end; Watermark.ZIndex = ZIndex

            function Watermark.SetText(text)
                Watermark.Text = text
            end

            function Watermark.SetVisible(visibility)
                Watermark.Visible = visibility
            end

            function Watermark.SetRate(rate)
                Watermark.Rate = rate
            end

            function Watermark.Think()
                Objects.Outline.Visible = Watermark.Visible

                if Watermark.Visible and os.clock() - Watermark.Clock >= Watermark.Rate then
                    Watermark.Clock = os.clock()

                    Objects.Text.Text = Utility.TextTriggers(Watermark.Text)

                    Objects.Text.Size = UDim2.new(0, 0, 0, Objects.Text.TextBounds.Y - 2) 
                end
            end

            Utility.Signal(RunService.RenderStepped:Connect(Watermark.Think))

            return Watermark
        end
        
        --

        function Library.HandleNotifications(step)
            Library.Fps = math.floor(1 / step)

            local Clock = os.clock()

            local Watermark = Library.ScreenGui:FindFirstChild("Watermark")

            local Offset = Watermark and Watermark.Visible and Watermark.AbsoluteSize.Y + 5 or 0
            for _,notification in Library.Notifications do
                local Objects = notification.Objects

                local Time = notification.Time
                
                if Clock - notification.Clock >= Time then
                    notification.Lerp = Utility.Lerp(notification.Lerp, 0, 0.1)
                else
                    notification.Lerp = Utility.Lerp(notification.Lerp, 255, 0.1)
                end

                local Lerp = notification.Lerp

                local Holder = Objects.Holder
                local Outline = Objects.Outline
                local Background = Objects.Background
                local Title = Objects.Title

                Holder.Position = UDim2.new(0, 10 + (-Holder.AbsoluteSize.X * (1 - (Lerp / 255))), 0, Offset)

                Outline.BackgroundTransparency = 1 - (Lerp / 255)
                Background.BackgroundTransparency = 1 - (Lerp / 255)
                Title.TextTransparency = 1 - (Lerp / 255)

                if #notification.Buttons > 0 then
                    notification.ButtonLerp = Utility.Lerp(notification.ButtonLerp, notification.ShowButtons and 255 or 0, 0.1)
                    
                    for _,obj in Objects.ButtonHolder:GetDescendants() do
                        local Index = Utility.GetTransparency(obj)

                        if not Index then
                            continue
                        end

                        if type(Index) == "table" then
                            if obj:IsA("TextLabel") then
                                obj[Index[1]] = 1 - (notification.ButtonLerp / 255)
                            else
                                obj[Index[1]] = 1 - (notification.ButtonLerp / 255)
                                obj[Index[2]] = 1 - (notification.ButtonLerp / 255)
                            end
                        else
                            obj[Index] = 1 - (notification.ButtonLerp / 255)
                        end
                    end
                end

                if Objects.Description then
                    Objects.Description.TextTransparency = 1 - (Lerp / 255)
                end

                if Objects.Time then
                    Objects.Time.BackgroundTransparency = 1 - (Lerp / 255)
                    Objects.Time.Size = UDim2.new(0, (Outline.AbsoluteSize.X - 10) * math.clamp(((notification.Clock - Clock) / notification.Time) * -1, 0, 1), 0, 2)
                end

                Offset += (Holder.AbsoluteSize.Y + 5) * (Lerp / 255)

                if Lerp <= 0 then
                    Holder:Destroy()

                    table.remove(Library.Notifications, table.find(Library.Notifications, notification))

                    continue
                end
            end
        end; Utility.Signal(RunService.RenderStepped:Connect(Library.HandleNotifications))

        function Library.GetConfig()
            local Config = { }

            for _,v in Library.ConfigFlags do
                local Value = Library.Flags[_]

                if type(Value) == "table" and Value["key"] then
                    Config[_] = {value = Value.value, mode = Value.mode, key = tostring(Value.key)}
                elseif type(Value) == "table" and Value["a"] and Value["c"] then
                    Config[_] = {a = Value.a, c = Value.c:ToHex()}
                else
                    Config[_] = Value
                end
            end

            return HttpService:JSONEncode(Config)
        end

        function Library.LoadConfig(data)
            data = HttpService:JSONDecode(data)

            for i,v in data do
                local Config = Library.ConfigFlags[i]

                if Config then
                    if type(v) == "table" and v["a"] and v["c"] then
                        Config({
                            a = v.a,
                            c = type(v.c) == "string" and Color3.fromHex(v.c) or v.c
                        })
                    elseif type(v) == "table" and v["key"] then
                        Config({
                            value = v.value,
                            mode = v.mode,
                            key = Utility.StringToEnum(v.key)
                        }, true)
                    else
                        Config(v)
                    end
                end
            end
        end

        -- Config Manager System
        function Library.CreateConfigManager(tab, options)
            if not tab or type(tab) ~= "table" then
                return nil
            end
            
            options = options or {}
            local side = options.side or "left"
            local sectionName = options.name or "Config Manager"
            local sectionDesc = options.description or "Save and load your configurations"
            local folderPath = options.folderPath or (Folder.."/Games/"..(Game and Game.Name or "Universal").."/Configs")
            
            -- Use tab's ZIndex if available
            local ZIndex = (tab.ZIndex or 0) + 1
            
            if not isfolder(folderPath) then
                makefolder(folderPath)
            end
            
            -- Create section for config manager
            local ConfigSection = tab:Section({
                name = sectionName,
                description = sectionDesc,
                side = side
            })
            
            -- Config name textbox
            local configNameTextbox = ConfigSection:Textbox({
                name = "Config Name",
                placeholder = "Enter config name...",
                flag = "ui_config_name"
            })
            
            -- Get list of configs
            local function GetConfigList()
                local configs = {}
                if isfolder(folderPath) then
                    for _, file in ipairs(listfiles(folderPath)) do
                        if file:sub(-5) == ".json" then
                            local configName = file:match("([^/\\]+)%.json$")
                            table.insert(configs, configName)
                        end
                    end
                end
                if #configs == 0 then
                    return {"No configs found"}
                end
                return configs
            end
            
            -- Config list dropdown
            local configListDropdown = ConfigSection:Dropdown({
                name = "Saved Configs",
                description = "Select a saved configuration",
                values = GetConfigList(),
                callback = function(value)
                    if value ~= "No configs found" then
                        Library.Flags["ui_config_name"] = value
                    end
                end,
                flag = "ui_selected_config"
            })
            
            -- Function to refresh the dropdown
            local function RefreshConfigList()
                if configListDropdown and type(configListDropdown) == "table" then
                    local configs = GetConfigList()
                    if configListDropdown.Refresh and type(configListDropdown.Refresh) == "function" then
                        configListDropdown:Refresh(configs)
                    end
                    
                    -- Update the flag
                    if #configs > 0 and configs[1] ~= "No configs found" then
                        Library.Flags["ui_selected_config"] = configs[1]
                    else
                        Library.Flags["ui_selected_config"] = "No configs found"
                    end
                    
                    -- Try to update display if available
                    pcall(function()
                        if Library.Flags["ui_selected_config"] and configListDropdown.Update then
                            configListDropdown:Update(Library.Flags["ui_selected_config"])
                        end
                    end)
                end
            end
            
            -- Save config button
            ConfigSection:Button({
                name = "Save Config",
                description = "Save current settings to a config file",
                callback = function()
                    local configName = Library.Flags["ui_config_name"]
                    if not configName or configName == "" or configName == "No configs found" then
                        configName = "default"
                    end
                    
                    local configPath = folderPath.."/"..configName..".json"
                    local configData = Library.GetConfig()
                    
                    writefile(configPath, configData)
                    Library.Notification({ name = "Config Saved", description = "Configuration '"..configName.."' has been saved." })
                    
                    RefreshConfigList()
                end
            })
            
            -- Load config button
            ConfigSection:Button({
                name = "Load Config",
                description = "Load selected configuration",
                callback = function()
                    local configName = Library.Flags["ui_selected_config"]
                    if not configName or configName == "No configs found" then
                        Library.Notification({ name = "Error", description = "No config selected" })
                        return
                    end
                    
                    local configPath = folderPath.."/"..configName..".json"
                    if isfile(configPath) then
                        local data = readfile(configPath)
                        Library.LoadConfig(data)
                        Library.Notification({ name = "Config Loaded", description = "Configuration '"..configName.."' has been loaded." })
                    else
                        Library.Notification({ name = "Error", description = "Config file not found" })
                    end
                end
            })
            
            -- Delete config button
            ConfigSection:Button({
                name = "Delete Config",
                description = "Delete selected configuration",
                callback = function()
                    local configName = Library.Flags["ui_selected_config"]
                    if not configName or configName == "No configs found" then
                        Library.Notification({ name = "Error", description = "No config selected" })
                        return
                    end
                    
                    local configPath = folderPath.."/"..configName..".json"
                    if isfile(configPath) then
                        delfile(configPath)
                        Library.Notification({ name = "Config Deleted", description = "Configuration '"..configName.."' has been deleted." })
                        RefreshConfigList()
                    else
                        Library.Notification({ name = "Error", description = "Config file not found" })
                    end
                end
            })
            
            -- Refresh list button
            ConfigSection:Button({
                name = "Refresh List",
                description = "Refresh the config list",
                callback = function()
                    RefreshConfigList()
                    Library.Notification({ name = "List Refreshed", description = "Config list has been updated." })
                end
            })
            
            return {
                Section = ConfigSection,
                RefreshList = RefreshConfigList
            }
        end

        function Library.Unload()
            for _,obj in Utility.Connections do
                obj:Disconnect()
            end

            for _,obj in Utility.Objects do
                obj:Destroy()
            end

            Env.Library = nil
        end

        Bin:add(function()
            Library.Unload()
        end)

    end; Env.Library = Library
--  

-- debug
    local Debugging = { } do
        Debugging.Enabled = false

        function Debugging.Log(...)
            if not Debugging.Enabled then
                return
            end
            
            print( string.format( "[DEBUG] (%s)", os.date("%X") ), ... )
        end

        function Debugging.Warn(...)
            if not Debugging.Enabled then
                return
            end
            
            warn( string.format( "[DEBUG] (%s)", os.date("%X") ), ... )
        end

        function Debugging.Error(...)
            if not Debugging.Enabled then
                return
            end

            error( string.format( "[DEBUG] (%s)", os.date("%X") ), ... )
        end
    end; Env.Lumora.Debugging = Debugging
--

-- signal
    local Signal = { }; Signal.__index = Signal do
        Signal.ClassName = "Signal"
        
        function Signal.new()
            local self = setmetatable({}, Signal)
    
            self._bindableEvent = Instance.new("BindableEvent")
            self._argMap = {}
            self._source = ""
    
            -- FUCK THIS FUCKING CONNECTION I HATE IT AND I DONT WANT IT HERE
            self._bindableEvent.Event:Connect(function(key)
                self._argMap[key] = nil
    
                if (not self._bindableEvent) and (not next(self._argMap)) then
                    self._argMap = nil
                end
            end)
    
            return self
        end
    
        function Signal:Fire(...)
            if not self._bindableEvent then
                return
            end
    
            local args = {...}
    
            local key = 1 + #self._argMap
            self._argMap[key] = args
    
            -- FIRE ALL THE NIGGERS FROM THE JOBS
            self._bindableEvent:Fire(key)
        end
    
        function Signal:Connect(handler)
            if not (type(handler) == "function") then
                error(("connect(%s)"):format(typeof(handler)), 2)
            end
    
            return self._bindableEvent.Event:Connect(function(key)
                handler(unpack(self._argMap[key]))
            end)
        end
    
        function Signal:Wait()
            local key = self._bindableEvent.Event:Wait()
            local args = self._argMap[key]
            if args then
                return unpack(args)
            else
                error("Missing arg data, probably due to reentrance.")
                return nil
            end
        end
    
        function Signal:Destroy()
            if self._bindableEvent then
                self._bindableEvent:Destroy()
                self._bindableEvent = nil
            end
    
            setmetatable(self, nil)
        end
    
        Signal.Disconnect = Signal.Destroy
    end; Env.Lumora.Signal = Signal
--

-- playerinfo
    local PlayerInfo = { Info = {} } do
        PlayerInfo.PlayerAdded = Signal.new()
        PlayerInfo.PlayerRemoved = Signal.new()
        
        function PlayerInfo.GetPlayers()
            return Game and Game.GetPlayers and Game.GetPlayers() or Players:GetPlayers()
        end

        function PlayerInfo.GetInfo(player)
            return PlayerInfo.Info[player]
        end

        function PlayerInfo.RegisterPlayer(player)
            local Struct = {}

            local IsPlayer = player:IsA("Player")

            Struct.Data = {
                Name = player.Name,
                Team = nil,
                DisplayName = IsPlayer and player.DisplayName or player.Name,

                Health = 0,
                MaxHealth = 100,
                Alive = false,

                Character = nil,
                Torso = nil,

                Tool = nil,

                IsTeammate = false,
            }; local Data = Struct.Data

            Data.Spawned = Signal.new()
            Data.Died = Signal.new()
            Data.IsPlayer = IsPlayer

            Struct.Step = Utility.Connect(RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
                local Character = Data.IsPlayer and player.Character or player

                Data.Character = Character
                Data.Torso = Character and Character:FindFirstChild("HumanoidRootPart")
                Data.Head = Character and Character:FindFirstChild("Head")
                Data.Alive = Data.Character and Data.Torso
                Data.Tool = Character and Character:FindFirstChildOfClass("Tool") and Character:FindFirstChildOfClass("Tool").Name
                Data.Health = Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health
                Data.MaxHealth = Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.MaxHealth

                if Data.IsPlayer then
                    Data.Team = player.Team
                    Data.IsTeammate = Data.Team == LocalPlayer.Team
                end

                if Game and Game.GetInfo then
                    Game.GetInfo( Data, player, Character )
                end

                -- prevent shitty - hgealth
                if Data.Health then
                    Data.Health = math.clamp(Data.Health, 0, math.huge)
                end
            end)))

            Struct.Destroy = function()
                Struct.Step:Disconnect()

                PlayerInfo.PlayerRemoved:Fire(player, Data.IsPlayer)

                PlayerInfo.Info[player] = nil
            end

            -- uh this will probably be used for custom gamez
            Struct.Spawned = function()
                Data.Alive = true

                Data.Spawned:Fire()
            end

            Struct.Died = function()
                Data.Alive = false

                Data.Died:Fire()
            end

            PlayerInfo.Info[player] = Struct

            PlayerInfo.PlayerAdded:Fire(player, Data.IsPlayer)

            Debugging.Log( "PlayerInfo", "RegisterPlayer", player )
        end

        function PlayerInfo.RemovePlayer(player)
            local Info = PlayerInfo.Info[player]

            if Info then
                Info.Destroy()

                Debugging.Log( "PlayerInfo", "RemovePlayer", player )
            end
        end

        for _,player in PlayerInfo.GetPlayers() do
            PlayerInfo.RegisterPlayer(player)
        end
        Utility.Connect(Players.PlayerAdded:Connect(function(player)
            PlayerInfo.RegisterPlayer(player)
        end))
        Utility.Connect(Players.PlayerRemoving:Connect(function(player)
            PlayerInfo.RemovePlayer(player)
        end))
    end; Env.Lumora.PlayerInfo = PlayerInfo
--

-- local player data
    local LocalPlayerData = nil;

    Utility.Connect(RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
        LocalPlayerData = PlayerInfo.GetInfo(LocalPlayer)
    end)))
--

-- Добавляем return для работы через loadstring
return Library
